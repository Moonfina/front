{"version":3,"sources":["hooks/masonry/useClaimRewardTimerMasonry.ts","hooks/masonry/useClaimRewardCheck.ts","views/Masonry/components/ProgressCountdown.tsx","hooks/useHarvestFromMasonry.ts","hooks/useEarningsOnMasonry.ts","views/Masonry/components/Harvest.tsx","hooks/masonry/useWithdrawCheck.ts","views/Masonry/components/DepositModal.tsx","views/Masonry/components/WithdrawModal.tsx","hooks/useStakedBalanceOnMasonry.ts","hooks/masonry/useUnstakeTimerMasonry.ts","hooks/useStakeToMasonry.ts","hooks/useWithdrawFromMasonry.ts","views/Masonry/components/Stake.tsx","hooks/useRedeemOnMasonry.ts","hooks/useCurrentEpoch.ts","hooks/useFetchMasonryAPR.ts","hooks/useCashPriceInEstimatedTWAP.ts","hooks/useTreasuryAllocationTimes.ts","hooks/useTotalStakedOnMasonry.ts","views/Masonry/Masonry.js","hooks/useHandleTransactionReceipt.ts","components/CardIcon/CardIcon.tsx","components/UnlockWallet/UnlockWallet.tsx","hooks/useTombStats.ts","hooks/useApprove.ts","components/Spacer/Spacer.tsx","components/Value/Value.tsx","hooks/useStakedTokenPriceInDollars.ts","components/Icon/Icon.tsx","components/icons/AddIcon.tsx","components/icons/RemoveIcon.tsx","components/IconButton/IconButton.tsx"],"names":["useClaimRewardTimerMasonry","useState","from","Date","to","time","setTime","tombFinance","useTombFinance","useEffect","getUserClaimRewardTime","then","useClaimRewardCheck","slowRefresh","useRefresh","canClaimReward","setCanClaimReward","isUnlocked","a","canUserClaimRewardFromMasonry","console","error","canUserClaimReward","StyledCountdown","styled","p","props","theme","color","grey","StyledProgressOuter","div","StyledProgress","progress","StyledCardContentInner","spacing","ProgressCountdown","base","deadline","hideBar","percentage","description","now","getTime","key","date","renderer","countdownProps","days","hours","minutes","seconds","h","String","m","s","padStart","useHarvestFromMasonry","handleTransactionReceipt","useHandleTransactionReceipt","onReward","useCallback","harvestCashFromMasonry","useEarningsOnMasonry","BigNumber","balance","setBalance","getEarningsOnMasonry","fetchBalance","StyledCardHeader","StyledCardActions","Harvest","tombStats","useTombStats","earnings","tokenPriceInDollars","useMemo","Number","priceInDollars","toFixed","earnedInDollars","getDisplayBalance","Box","Card","CardContent","CardIcon","TokenSymbol","symbol","Value","value","Label","text","Button","onClick","variant","disabled","eq","mt","style","Typography","textAlign","useWithdrawCheck","canWithdraw","setCanWithdraw","canUserUnstakeFromMasonry","canUserWithdraw","DepositModal","max","onConfirm","onDismiss","tokenName","val","setVal","fullBalance","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","Modal","ModalTitle","TokenInput","onSelectMax","onChange","ModalActions","WithdrawModal","useStakedBalanceOnMasonry","getStakedSharesOnMasonry","useUnstakeTimerMasonry","getUserUnstakeTime","useStakeToMasonry","onStake","amount","stakeShareToMasonry","useWithdrawFromMasonry","onWithdraw","withdrawShareFromMasonry","StyledActionSpacer","Stake","useApprove","TSHARE","contracts","Masonry","address","approveStatus","approve","tokenBalance","useTokenBalance","stakedBalance","stakedTokenPriceInDollars","useStakedTokenPriceInDollars","toString","canWithdrawFromMasonry","useModal","onDismissDeposit","onPresentDeposit","onDismissWithdraw","onPresentWithdraw","ApprovalState","APPROVED","NOT_APPROVED","marginTop","IconButton","useRedeemOnMasonry","onRedeem","alertDesc","exitFromMasonry","useCurrentEpoch","currentEpoch","setCurrentEpoch","getCurrentEpoch","fetchCurrentEpoch","useFetchMasonryAPR","apr","setApr","getMasonryAPR","fetchMasonryAPR","useCashPriceInEstimatedTWAP","stat","setStat","getTombStatInEstimatedTWAP","fetchCashPrice","useTreasuryAllocationTimes","getTreasuryNextAllocationTime","useTotalStakedOnMasonry","totalStaked","setTotalStaked","getTotalStakedInMasonry","fetchTotalStaked","BackgroundImage","createGlobalStyle","MasonryImage","useStyles","makeStyles","gridItem","height","breakpoints","up","StyledBoardroom","StyledCardsWrapper","StyledCardWrapper","classes","account","useWallet","cashStat","masonryAPR","scalingFactor","Page","align","gutterBottom","Grid","container","justify","item","xs","md","lg","className","moment","toDate","width","Alert","severity","Spacer","UnlockWallet","addTransaction","useTransactionAdder","addPopup","useAddPopup","promise","summary","tx","catch","err","message","includes","toLowerCase","slice","stack","StyledCardIcon","children","position","top","left","transform","AccountButton","fastRefresh","getTombStat","fetchTombPrice","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","token","spender","pendingApproval","useHasPendingApproval","currentAllowance","useAllowance","approvalState","lt","PENDING","UNKNOWN","response","approval","tokenAddress","StyledSpacer","size","useContext","ThemeContext","StyledValue","stakedTokenName","stakedToken","setStakedTokenPriceInDollars","getDepositTokenPriceInDollars","refreshStakedTokenPriceInDollars","setInterval","config","refreshInterval","clearInterval","StyledIcon","Icon","AddIcon","themeColor","viewBox","d","fill","RemoveIcon","StyledButton","button","primary","main","undefined","StyledLink","Link"],"mappings":"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","file":"static/js/12.24622e44.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport useTombFinance from '../useTombFinance';\nimport { AllocationTime } from '../../tomb-finance/types';\n\nconst useClaimRewardTimerMasonry = () => {\n  const [time, setTime] = useState<AllocationTime>({\n    from: new Date(),\n    to: new Date(),\n  });\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    if (tombFinance) {\n      tombFinance.getUserClaimRewardTime().then(setTime);\n    }\n  }, [tombFinance]);\n  return time;\n};\n\nexport default useClaimRewardTimerMasonry;\n","import { useEffect, useState } from 'react';\nimport useRefresh from '../useRefresh';\nimport useTombFinance from './../useTombFinance';\n\nconst useClaimRewardCheck = () => {\n  const  { slowRefresh } = useRefresh();\n  const [canClaimReward, setCanClaimReward] = useState(false);\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  useEffect(() => {\n    async function canUserClaimReward() {\n      try {\n        setCanClaimReward(await tombFinance.canUserClaimRewardFromMasonry());\n      } catch(err){\n        console.error(err);\n      };\n    }\n    if (isUnlocked) {\n      canUserClaimReward();\n    }\n  }, [isUnlocked, slowRefresh, tombFinance]);\n\n  return canClaimReward;\n};\n\nexport default useClaimRewardCheck;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Countdown, { CountdownRenderProps } from 'react-countdown';\n\ninterface ProgressCountdownProps {\n  base: Date;\n  deadline: Date;\n  hideBar?: boolean;\n  description: string;\n}\n\nconst ProgressCountdown: React.FC<ProgressCountdownProps> = ({ base, deadline, hideBar, description }) => {\n  const percentage =\n    Date.now() >= deadline.getTime()\n      ? 100\n      : ((Date.now() - base.getTime()) / (deadline.getTime() - base.getTime())) * 100;\n\n  const countdownRenderer = (countdownProps: CountdownRenderProps) => {\n    const { days, hours, minutes, seconds } = countdownProps;\n    const h = String(days * 24 + hours);\n    const m = String(minutes);\n    const s = String(seconds);\n    return (\n      <StyledCountdown>\n        {h.padStart(2, '0')}:{m.padStart(2, '0')}:{s.padStart(2, '0')}\n      </StyledCountdown>\n    );\n  };\n  return (\n    // <Card>\n    <StyledCardContentInner>\n      {/* <StyledDesc>{description}</StyledDesc> */}\n      <Countdown key={new Date().getTime()} date={deadline} renderer={countdownRenderer} />\n      {hideBar ? (\n        ''\n      ) : (\n        <StyledProgressOuter>\n          <StyledProgress progress={percentage} />\n        </StyledProgressOuter>\n      )}\n    </StyledCardContentInner>\n    // </Card>\n  );\n};\n\nconst StyledCountdown = styled.p`\n  // font-size: 14px;\n  font-weight: 700;\n  // color: ${(props) => props.theme.color.grey[100]};\n  margin: 0 0 6px 0;\n`;\n\nconst StyledProgressOuter = styled.div`\n  width: 100%;\n  height: 8px;\n  border-radius: 3px;\n  background: ${(props) => props.theme.color.grey[700]};\n`;\n\nconst StyledProgress = styled.div<{ progress: number }>`\n  width: ${(props) => props.progress}%;\n  height: 100%;\n  border-radius: 3px;\n  background: ${(props) => props.theme.color.grey[100]};\n`;\n\nconst StyledCardContentInner = styled.div`\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  // padding: ${(props) => props.theme.spacing[2]}px ${(props) => props.theme.spacing[4]}px;\n`;\n\nexport default ProgressCountdown;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst useHarvestFromMasonry = () => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleReward = useCallback(() => {\n    handleTransactionReceipt(tombFinance.harvestCashFromMasonry(), 'Claim 2OMB from BOARDROOM');\n  }, [tombFinance, handleTransactionReceipt]);\n\n  return { onReward: handleReward };\n};\n\nexport default useHarvestFromMasonry;\n","import { useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport useTombFinance from './useTombFinance';\nimport useRefresh from './useRefresh';\n\nconst useEarningsOnMasonry = () => {\n  const { slowRefresh } = useRefresh();\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  useEffect(() => {\n    async function fetchBalance() {\n      try {\n        setBalance(await tombFinance.getEarningsOnMasonry());\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    if (isUnlocked) {\n      fetchBalance();\n    }\n  }, [isUnlocked, tombFinance, slowRefresh]);\n\n  return balance;\n};\n\nexport default useEarningsOnMasonry;\n","import React, { useMemo } from 'react';\nimport styled from 'styled-components';\n\nimport { Box, Button, Card, CardContent, Typography } from '@material-ui/core';\n\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport Label from '../../../components/Label';\nimport Value from '../../../components/Value';\nimport CardIcon from '../../../components/CardIcon';\nimport useClaimRewardTimerMasonry from '../../../hooks/masonry/useClaimRewardTimerMasonry';\nimport useClaimRewardCheck from '../../../hooks/masonry/useClaimRewardCheck';\nimport ProgressCountdown from './../components/ProgressCountdown';\nimport useHarvestFromMasonry from '../../../hooks/useHarvestFromMasonry';\nimport useEarningsOnMasonry from '../../../hooks/useEarningsOnMasonry';\nimport useTombStats from '../../../hooks/useTombStats';\nimport { getDisplayBalance } from '../../../utils/formatBalance';\n\nconst Harvest: React.FC = () => {\n  const tombStats = useTombStats();\n  const { onReward } = useHarvestFromMasonry();\n  const earnings = useEarningsOnMasonry();\n  const canClaimReward = useClaimRewardCheck();\n\n  const tokenPriceInDollars = useMemo(\n    () => (tombStats ? Number(tombStats.priceInDollars).toFixed(2) : null),\n    [tombStats],\n  );\n\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\n\n  const { from, to } = useClaimRewardTimerMasonry();\n\n  return (\n    <Box>\n      <Card>\n        <CardContent>\n          <StyledCardContentInner>\n            <StyledCardHeader>\n              <CardIcon>\n                <TokenSymbol symbol=\"XOMB\" />\n              </CardIcon>\n              <Value value={getDisplayBalance(earnings)} />\n              <Label text={`≈ $${earnedInDollars}`} />\n              <Label text=\"XOMB Earned\" />\n            </StyledCardHeader>\n            <StyledCardActions>\n              <Button\n                onClick={onReward}\n                color=\"primary\"\n                variant=\"contained\"\n                disabled={earnings.eq(0) || !canClaimReward}\n              >\n                Claim Reward\n              </Button>\n            </StyledCardActions>\n          </StyledCardContentInner>\n        </CardContent>\n      </Card>\n      <Box mt={2} style={{ color: '#FFF' }}>\n        {canClaimReward ? (\n          ''\n        ) : (\n          <Card>\n            <CardContent>\n              <Typography style={{ textAlign: 'center' }}>Claim possible in</Typography>\n              <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Claim available in\" />\n            </CardContent>\n          </Card>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: ${(props) => props.theme.spacing[6]}px;\n  width: 100%;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport default Harvest;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './../useTombFinance';\nimport useRefresh from '../useRefresh';\n\nconst useWithdrawCheck = () => {\n  const [canWithdraw, setCanWithdraw] = useState(false);\n  const tombFinance = useTombFinance();\n  const { slowRefresh } = useRefresh();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  useEffect(() => {\n    async function canUserWithdraw() {\n      try {\n        setCanWithdraw(await tombFinance.canUserUnstakeFromMasonry());\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    if (isUnlocked) {\n      canUserWithdraw();\n    }\n  }, [isUnlocked, tombFinance, slowRefresh]);\n\n  return canWithdraw;\n};\n\nexport default useWithdrawCheck;\n","import React, { useCallback, useMemo, useState } from 'react';\n\nimport { Button } from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, { ModalProps } from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\n\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\nimport { BigNumber } from 'ethers';\n\ninterface DepositModalProps extends ModalProps {\n  max: BigNumber;\n  onConfirm: (amount: string) => void;\n  tokenName?: string;\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' }) => {\n  const [val, setVal] = useState('');\n\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, tokenName === 'USDC' ? 6 : 18);\n  }, [max, tokenName]);\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value);\n    },\n    [setVal],\n  );\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance);\n  }, [fullBalance, setVal]);\n\n  return (\n    <Modal>\n      <ModalTitle text={`Deposit XSHARES`} />\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\n          Confirm\n        </Button>\n      </ModalActions>\n    </Modal>\n  );\n};\n\nexport default DepositModal;\n","import React, { useCallback, useMemo, useState } from 'react';\n\nimport { Button } from '@material-ui/core';\nimport Modal, { ModalProps } from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\n\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\nimport { BigNumber } from 'ethers';\n\ninterface WithdrawModalProps extends ModalProps {\n  max: BigNumber;\n  onConfirm: (amount: string) => void;\n  tokenName?: string;\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('');\n\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max);\n  }, [max]);\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value);\n    },\n    [setVal],\n  );\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance);\n  }, [fullBalance, setVal]);\n\n  return (\n    <Modal>\n      <ModalTitle text={`Withdraw ${tokenName}`} />\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\n          Confirm\n        </Button>\n        {/* <Button text=\"Cancel\" variant=\"secondary\" onClick={onDismiss} />\n        <Button text=\"Confirm\" onClick={() => onConfirm(val)} /> */}\n      </ModalActions>\n    </Modal>\n  );\n};\n\nexport default WithdrawModal;\n","import { useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport useTombFinance from './useTombFinance';\nimport useRefresh from './useRefresh';\n\nconst useStakedBalanceOnMasonry = () => {\n  const { slowRefresh } = useRefresh();\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n  useEffect(() => {\n    async function fetchBalance() {\n      try {\n        setBalance(await tombFinance.getStakedSharesOnMasonry());\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    if (isUnlocked) {\n      fetchBalance();\n    }\n  }, [slowRefresh, isUnlocked, tombFinance]);\n  return balance;\n};\n\nexport default useStakedBalanceOnMasonry;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './../useTombFinance';\nimport { AllocationTime } from '../../tomb-finance/types';\n\nconst useUnstakeTimerMasonry = () => {\n  const [time, setTime] = useState<AllocationTime>({\n    from: new Date(),\n    to: new Date(),\n  });\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    if (tombFinance) {\n      tombFinance.getUserUnstakeTime().then(setTime);\n    }\n  }, [tombFinance]);\n  return time;\n};\n\nexport default useUnstakeTimerMasonry;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst useStakeToMasonry = () => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleStake = useCallback(\n    (amount: string) => {\n      handleTransactionReceipt(tombFinance.stakeShareToMasonry(amount), `Stake ${amount} 2SHARES to the Boardroom`);\n    },\n    [tombFinance, handleTransactionReceipt],\n  );\n  return { onStake: handleStake };\n};\n\nexport default useStakeToMasonry;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst useWithdrawFromMasonry = () => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleWithdraw = useCallback(\n    (amount: string) => {\n      handleTransactionReceipt(\n        tombFinance.withdrawShareFromMasonry(amount),\n        `Withdrew ${amount} 2SHARES from the boardroom `,\n      );\n    },\n    [tombFinance, handleTransactionReceipt],\n  );\n  return { onWithdraw: handleWithdraw };\n};\n\nexport default useWithdrawFromMasonry;\n","import React, { useMemo } from 'react';\nimport styled from 'styled-components';\n\nimport { Box, Button, Card, CardContent, Typography } from '@material-ui/core';\n\n// import Button from '../../../components/Button';\n// import Card from '../../../components/Card';\n// import CardContent from '../../../components/CardContent';\nimport CardIcon from '../../../components/CardIcon';\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\nimport IconButton from '../../../components/IconButton';\nimport Label from '../../../components/Label';\nimport Value from '../../../components/Value';\n\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\nimport useModal from '../../../hooks/useModal';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useWithdrawCheck from '../../../hooks/masonry/useWithdrawCheck';\n\nimport { getDisplayBalance } from '../../../utils/formatBalance';\n\nimport DepositModal from './DepositModal';\nimport WithdrawModal from './WithdrawModal';\nimport useTombFinance from '../../../hooks/useTombFinance';\nimport ProgressCountdown from './../components/ProgressCountdown';\nimport useStakedBalanceOnMasonry from '../../../hooks/useStakedBalanceOnMasonry';\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\nimport useUnstakeTimerMasonry from '../../../hooks/masonry/useUnstakeTimerMasonry';\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport useStakeToMasonry from '../../../hooks/useStakeToMasonry';\nimport useWithdrawFromMasonry from '../../../hooks/useWithdrawFromMasonry';\n\nconst Stake: React.FC = () => {\n  const tombFinance = useTombFinance();\n  const [approveStatus, approve] = useApprove(tombFinance.TSHARE, tombFinance.contracts.Masonry.address);\n\n  const tokenBalance = useTokenBalance(tombFinance.TSHARE);\n  const stakedBalance = useStakedBalanceOnMasonry();\n  const { from, to } = useUnstakeTimerMasonry();\n\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars('TSHARE', tombFinance.TSHARE);\n  const tokenPriceInDollars = useMemo(\n    () =>\n      stakedTokenPriceInDollars\n        ? (Number(stakedTokenPriceInDollars) * Number(getDisplayBalance(stakedBalance))).toFixed(2).toString()\n        : null,\n    [stakedTokenPriceInDollars, stakedBalance],\n  );\n  // const isOldBoardroomMember = boardroomVersion !== 'latest';\n\n  const { onStake } = useStakeToMasonry();\n  const { onWithdraw } = useWithdrawFromMasonry();\n  const canWithdrawFromMasonry = useWithdrawCheck();\n\n  const [onPresentDeposit, onDismissDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={(value) => {\n        onStake(value);\n        onDismissDeposit();\n      }}\n      tokenName={'XSHARES'}\n    />,\n  );\n\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\n    <WithdrawModal\n      max={stakedBalance}\n      onConfirm={(value) => {\n        onWithdraw(value);\n        onDismissWithdraw();\n      }}\n      tokenName={'XSHARES'}\n    />,\n  );\n\n  return (\n    <Box>\n      <Card>\n        <CardContent>\n          <StyledCardContentInner>\n            <StyledCardHeader>\n              <CardIcon>\n                <TokenSymbol symbol=\"TSHARE\" />\n              </CardIcon>\n              <Value value={getDisplayBalance(stakedBalance)} />\n              <Label text={`≈ $${tokenPriceInDollars}`} />\n              <Label text={'XSHARES Staked'} />\n            </StyledCardHeader>\n            <StyledCardActions>\n              {approveStatus !== ApprovalState.APPROVED ? (\n                <Button\n                  disabled={approveStatus !== ApprovalState.NOT_APPROVED}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  style={{ marginTop: '20px' }}\n                  onClick={approve}\n                >\n                  Approve 2SHARES\n                </Button>\n              ) : (\n                <>\n                  <IconButton disabled={!canWithdrawFromMasonry} onClick={onPresentWithdraw}>\n                    <RemoveIcon />\n                  </IconButton>\n                  <StyledActionSpacer />\n                  <IconButton onClick={onPresentDeposit}>\n                    <AddIcon />\n                  </IconButton>\n                </>\n              )}\n            </StyledCardActions>\n          </StyledCardContentInner>\n        </CardContent>\n      </Card>\n      <Box mt={2} style={{ color: '#FFF' }}>\n        {canWithdrawFromMasonry ? (\n          ''\n        ) : (\n          <Card>\n            <CardContent>\n              <Typography style={{ textAlign: 'center' }}>Withdraw possible in</Typography>\n              <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Withdraw available in\" />\n            </CardContent>\n          </Card>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 28px;\n  width: 100%;\n`;\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport default Stake;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst useRedeemOnMasonry = (description?: string) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleRedeem = useCallback(() => {\n    const alertDesc = description || 'Redeem 2SHARES from Masonry';\n    handleTransactionReceipt(tombFinance.exitFromMasonry(), alertDesc);\n  }, [tombFinance, description, handleTransactionReceipt]);\n  return { onRedeem: handleRedeem };\n};\n\nexport default useRedeemOnMasonry;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { BigNumber } from 'ethers';\nimport useRefresh from './useRefresh';\n\nconst useCurrentEpoch = () => {\n  const [currentEpoch, setCurrentEpoch] = useState<BigNumber>(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n  const { slowRefresh } = useRefresh(); \n\n  useEffect(() => {\n    async function fetchCurrentEpoch () {\n      try {\n        setCurrentEpoch(await tombFinance.getCurrentEpoch());\n      } catch(err) {\n        console.error(err);\n      }\n    }\n    fetchCurrentEpoch();\n  }, [setCurrentEpoch, tombFinance, slowRefresh]);\n\n  return currentEpoch;\n};\n\nexport default useCurrentEpoch;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport useRefresh from './useRefresh';\n\nconst useFetchMasonryAPR = () => {\n  const [apr, setApr] = useState<number>(0);\n  const tombFinance = useTombFinance();\n  const { slowRefresh } = useRefresh(); \n\n  useEffect(() => {\n    async function fetchMasonryAPR() {\n      try {\n        setApr(await tombFinance.getMasonryAPR());\n      } catch(err){\n        console.error(err);\n      }\n    }\n   fetchMasonryAPR();\n  }, [setApr, tombFinance, slowRefresh]);\n\n  return apr;\n};\n\nexport default useFetchMasonryAPR;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { TokenStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useCashPriceInEstimatedTWAP = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const tombFinance = useTombFinance();\n  const { slowRefresh } = useRefresh(); \n\n  useEffect(() => {\n    async function fetchCashPrice() {\n      try {\n        setStat(await tombFinance.getTombStatInEstimatedTWAP());\n      }catch(err) {\n        console.error(err);\n      }\n    }\n    fetchCashPrice();\n  }, [setStat, tombFinance, slowRefresh]);\n\n  return stat;\n};\n\nexport default useCashPriceInEstimatedTWAP;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { AllocationTime } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\n\nconst useTreasuryAllocationTimes = () => {\n  const { slowRefresh } = useRefresh();\n  const [time, setTime] = useState<AllocationTime>({\n    from: new Date(),\n    to: new Date(),\n  });\n  const tombFinance = useTombFinance();\n  useEffect(() => {\n    if (tombFinance) {\n      tombFinance.getTreasuryNextAllocationTime().then(setTime);\n    }\n  }, [tombFinance, slowRefresh]);\n  return time;\n};\n\nexport default useTreasuryAllocationTimes;\n","import { useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport useTombFinance from './useTombFinance';\nimport useRefresh from './useRefresh';\n\nconst useTotalStakedOnMasonry = () => {\n  const [totalStaked, setTotalStaked] = useState(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n  const { slowRefresh } = useRefresh();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  useEffect(() => {\n    async function fetchTotalStaked() {\n      try {\n        setTotalStaked(await tombFinance.getTotalStakedInMasonry());\n      } catch(err) {\n        console.error(err);\n      }\n    }\n    if (isUnlocked) {\n     fetchTotalStaked();\n    }\n  }, [isUnlocked, slowRefresh, tombFinance]);\n\n  return totalStaked;\n};\n\nexport default useTotalStakedOnMasonry;\n","import React, { useMemo } from 'react';\nimport { useWallet } from 'use-wallet';\nimport moment from 'moment';\nimport styled from 'styled-components';\nimport Spacer from '../../components/Spacer';\nimport Harvest from './components/Harvest';\nimport Stake from './components/Stake';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Box, Card, CardContent, Button, Typography, Grid } from '@material-ui/core';\n\nimport { Alert } from '@material-ui/lab';\n\nimport UnlockWallet from '../../components/UnlockWallet';\nimport Page from '../../components/Page';\n\nimport useRedeemOnMasonry from '../../hooks/useRedeemOnMasonry';\nimport useStakedBalanceOnMasonry from '../../hooks/useStakedBalanceOnMasonry';\nimport { getDisplayBalance } from '../../utils/formatBalance';\nimport useCurrentEpoch from '../../hooks/useCurrentEpoch';\nimport useFetchMasonryAPR from '../../hooks/useFetchMasonryAPR';\n\nimport useCashPriceInEstimatedTWAP from '../../hooks/useCashPriceInEstimatedTWAP';\nimport useTreasuryAllocationTimes from '../../hooks/useTreasuryAllocationTimes';\nimport useTotalStakedOnMasonry from '../../hooks/useTotalStakedOnMasonry';\nimport useClaimRewardCheck from '../../hooks/masonry/useClaimRewardCheck';\nimport useWithdrawCheck from '../../hooks/masonry/useWithdrawCheck';\nimport ProgressCountdown from './components/ProgressCountdown';\nimport MasonryImage from '../../assets/img/wallpaperbetter.jpg';\nimport { createGlobalStyle } from 'styled-components';\n\nconst BackgroundImage = createGlobalStyle`\n  body, html {\n    background: url(${MasonryImage}) no-repeat !important;\n    background-size: cover !important;\n  }\n`;\n\nconst useStyles = makeStyles((theme) => ({\n  gridItem: {\n    height: '100%',\n    [theme.breakpoints.up('md')]: {\n      height: '90px',\n    },\n  },\n}));\n\nconst Masonry = () => {\n  const classes = useStyles();\n  const { account } = useWallet();\n  const { onRedeem } = useRedeemOnMasonry();\n  const stakedBalance = useStakedBalanceOnMasonry();\n  const currentEpoch = useCurrentEpoch();\n  const cashStat = useCashPriceInEstimatedTWAP();\n  const totalStaked = useTotalStakedOnMasonry();\n  const masonryAPR = useFetchMasonryAPR();\n  const canClaimReward = useClaimRewardCheck();\n  const canWithdraw = useWithdrawCheck();\n  const scalingFactor = useMemo(() => (cashStat ? Number(cashStat.priceInDollars).toFixed(4) : null), [cashStat]);\n  const { to } = useTreasuryAllocationTimes();\n\n  return (\n    <Page>\n      <BackgroundImage />\n      {!!account ? (\n        <>\n          <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\n            Boardroom\n          </Typography>\n          <Box mt={5}>\n            <Grid container justify=\"center\" spacing={3}>\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n                <Card className={classes.gridItem}>\n                  <CardContent>\n                    <Typography style={{ textAlign: 'center' }}>Next Epoch</Typography>\n                    <ProgressCountdown base={moment().toDate()} hideBar={true} deadline={to} description=\"Next Epoch\" />\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n                <Card className={classes.gridItem}>\n                  <CardContent align=\"center\">\n                    <Typography>Current Epoch</Typography>\n                    <Typography>{Number(currentEpoch)}</Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n                <Card className={classes.gridItem}>\n                  <CardContent align=\"center\">\n                    <Typography>\n                      2OMB Price<small>(TWAP)</small>\n                    </Typography>\n                    <Typography>{scalingFactor}</Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n                <Card className={classes.gridItem}>\n                  <CardContent align=\"center\">\n                    <Typography>APR</Typography>\n                    <Typography>{masonryAPR.toFixed(2)}%</Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={2} lg={2}>\n                <Card className={classes.gridItem}>\n                  <CardContent align=\"center\">\n                    <Typography>2SHARES Staked</Typography>\n                    <Typography>{getDisplayBalance(totalStaked)}</Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n\n            <Grid container justify=\"center\">\n              <Box mt={3} style={{ width: '600px' }}>\n                <Alert variant=\"filled\" severity=\"warning\">\n                  Staked 2SHAREs can only be withdrawn after 2 epochs (12 hours) since deposit. Any time tokens are harvested, deposited, or withdrawn, the lockup timer gets reset.\n                </Alert>\n              </Box>\n            </Grid>\n\n            <Box mt={4}>\n              <StyledBoardroom>\n                <StyledCardsWrapper>\n                  <StyledCardWrapper>\n                    <Harvest />\n                  </StyledCardWrapper>\n                  <Spacer />\n                  <StyledCardWrapper>\n                    <Stake />\n                  </StyledCardWrapper>\n                </StyledCardsWrapper>\n              </StyledBoardroom>\n            </Box>\n\n            {/* <Grid container justify=\"center\" spacing={3}>\n            <Grid item xs={4}>\n              <Card>\n                <CardContent align=\"center\">\n                  <Typography>Rewards</Typography>\n\n                </CardContent>\n                <CardActions style={{justifyContent: 'center'}}>\n                  <Button color=\"primary\" variant=\"outlined\">Claim Reward</Button>\n                </CardActions>\n                <CardContent align=\"center\">\n                  <Typography>Claim Countdown</Typography>\n                  <Typography>00:00:00</Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid item xs={4}>\n              <Card>\n                <CardContent align=\"center\">\n                  <Typography>Stakings</Typography>\n                  <Typography>{getDisplayBalance(stakedBalance)}</Typography>\n                </CardContent>\n                <CardActions style={{justifyContent: 'center'}}>\n                  <Button>+</Button>\n                  <Button>-</Button>\n                </CardActions>\n              </Card>\n            </Grid>\n          </Grid> */}\n          </Box>\n\n          <Box mt={5}>\n            <Grid container justify=\"center\" spacing={3} mt={10}>\n              <Button\n                disabled={stakedBalance.eq(0) || (!canWithdraw && !canClaimReward)}\n                onClick={onRedeem}\n                color=\"primary\"\n                variant=\"contained\"\n              >\n                Claim and Withdraw\n              </Button>\n            </Grid>\n          </Box>\n        </>\n      ) : (\n        <UnlockWallet />\n      )}\n    </Page>\n  );\n};\n\nconst StyledBoardroom = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst StyledCardsWrapper = styled.div`\n  display: flex;\n  width: 600px;\n  @media (max-width: 768px) {\n    width: 100%;\n    flex-flow: column nowrap;\n    align-items: center;\n  }\n`;\n\nconst StyledCardWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 80%;\n  }\n`;\n\nexport default Masonry;\n","import { useCallback } from 'react';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { useAddPopup } from '../state/application/hooks';\n\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\n  const addTransaction = useTransactionAdder();\n  const addPopup = useAddPopup();\n\n  return useCallback(\n    (promise: Promise<TransactionResponse>, summary: string) => {\n      promise\n        .then((tx) => addTransaction(tx, { summary }))\n        .catch((err) => {\n          if (err.message.includes('User denied')) {\n            // User denied transaction signature on MetaMask.\n            return;\n          }\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\n          console.error(`${message}: ${err.message || err.stack}`);\n          addPopup({ error: { message, stack: err.message || err.stack } });\n        });\n    },\n    [addPopup, addTransaction],\n  );\n}\n\nexport default useHandleTransactionReceipt;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface CardIconProps {\n  children?: React.ReactNode;\n}\n\nconst CardIcon: React.FC<CardIconProps> = ({ children }) => <StyledCardIcon>{children}</StyledCardIcon>;\n\nconst StyledCardIcon = styled.div`\nbackground-color: none;\nfont-size: 36px;\nheight: 95px;\nwidth: 95px;\nborder-radius: 40px;\nalign-items: center;\ndisplay: flex;\njustify-content: center;\nbox-shadow: none !important;\nmargin: 0 auto ${(props) => props.theme.spacing[3]}px;\n`;\n\nexport default CardIcon;\n","import React from 'react';\nimport { Box } from '@material-ui/core';\nimport AccountButton from '../Nav/AccountButton';\n\nconst UnlockWallet = () => {\n  return (\n    <Box style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\n      <AccountButton />\n      {/* <Button color=\"primary\" variant=\"contained\" onClick={() => connect('injected')}>Unlock Wallet</Button> */}\n    </Box>\n  );\n};\n\nexport default UnlockWallet;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { TokenStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useTombStats = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const { fastRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchTombPrice(){\n      try {\n        setStat(await tombFinance.getTombStat());\n      }\n      catch(err){\n        console.error(err)\n      }\n    }\n    fetchTombPrice();\n  }, [setStat, tombFinance, fastRefresh]);\n\n  return stat;\n};\n\nexport default useTombStats;\n","import { BigNumber, ethers } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport ERC20 from '../tomb-finance/ERC20';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApprove(token: ERC20, spender: string): [ApprovalState, () => Promise<void>] {\n  const pendingApproval = useHasPendingApproval(token.address, spender);\n  const currentAllowance = useAllowance(token, spender, pendingApproval);\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval]);\n\n  const addTransaction = useTransactionAdder();\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(spender, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: spender,\n      },\n    });\n  }, [approvalState, token, spender, addTransaction]);\n\n  return [approvalState, approve];\n}\n\nexport default useApprove;\n","import React, { useContext } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext);\n\n  let s: number;\n  switch (size) {\n    case 'lg':\n      s = spacing[6];\n      break;\n    case 'sm':\n      s = spacing[2];\n      break;\n    case 'md':\n    default:\n      s = spacing[4];\n  }\n\n  return <StyledSpacer size={s} />;\n};\n\ninterface StyledSpacerProps {\n  size: number;\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`;\n\nexport default Spacer;\n","import React from 'react';\n\nimport styled from 'styled-components';\n\ninterface ValueProps {\n  value: string;\n}\n\nconst Value: React.FC<ValueProps> = ({ value }) => {\n  return <StyledValue>{value}</StyledValue>;\n};\n\nconst StyledValue = styled.div`\n  font-size: 36px;\n  font-weight: 700;\n`;\n\nexport default Value;\n","import { useCallback, useEffect, useState } from 'react';\n\nimport useTombFinance from './useTombFinance';\nimport config from '../config';\nimport ERC20 from '../tomb-finance/ERC20';\n\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await tombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\n    setStakedTokenPriceInDollars(balance);\n  }, [stakedToken, stakedTokenName, tombFinance]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(err.stack));\n\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\n    }\n  }, [isUnlocked, setStakedTokenPriceInDollars, tombFinance, fetchBalance]);\n\n  return stakedTokenPriceInDollars;\n};\n\nexport default useStakedTokenPriceInDollars;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport interface IconProps {\n  color?: string;\n  children?: string;\n}\n\nconst Icon: React.FC = ({ children }) => <StyledIcon>{children}</StyledIcon>;\n\nconst StyledIcon = styled.div``;\n\nexport default Icon;\n","import React, { useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\n\nimport Icon, { IconProps } from '../Icon';\n\nconst AddIcon: React.FC<IconProps> = ({ color }) => {\n  const { color: themeColor } = useContext(ThemeContext);\n  return (\n    <Icon>\n      <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" fill={color ? color : themeColor.grey[400]} />\n      </svg>\n    </Icon>\n  );\n};\n\nexport default AddIcon;\n","import React, { useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\n\nimport Icon, { IconProps } from '../Icon';\n\nconst RemoveIcon: React.FC<IconProps> = ({ color }) => {\n  const { color: themeColor } = useContext(ThemeContext);\n  return (\n    <Icon>\n      <svg viewBox=\"0 0 24 24\" fill={color ? color : themeColor.grey[400]} width=\"18px\" height=\"18px\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M19 13H5v-2h14v2z\" />\n      </svg>\n    </Icon>\n  );\n};\n\nexport default RemoveIcon;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Link } from 'react-router-dom';\n\ninterface IconButtonProps {\n  children?: React.ReactNode;\n  disabled?: boolean;\n  onClick?: () => void;\n  to?: string;\n}\n\nconst IconButton: React.FC<IconButtonProps> = ({ children, disabled, onClick, to }) => {\n  return (\n    <StyledButton disabled={disabled} onClick={onClick}>\n      {!!to ? <StyledLink to={to}>{children}</StyledLink> : children}\n    </StyledButton>\n  );\n};\n\ninterface StyledButtonProps {\n  disabled?: boolean;\n}\n/*\n  box-shadow: 6px 6px 12px ${props => props.theme.color.grey[600]},\n    -12px -12px 24px ${props => props.theme.color.grey[800]}aa;\n */\n\nconst StyledButton = styled.button<StyledButtonProps>`\n  align-items: center;\n  // background-color: ${(props) => props.theme.color.grey[!props.disabled ? 700 : 900]};\n  background-color: ${(props) => (!props.disabled ? '#571eb1' : props.theme.color.grey[900])};\n  border: 0;\n  border-radius: 28px;\n  color: ${(props) => (!props.disabled ? props.theme.color.primary.main : props.theme.color.grey[500])};\n  cursor: pointer;\n  display: flex;\n  font-weight: 700;\n  height: 56px;\n  justify-content: center;\n  letter-spacing: 1px;\n  outline: none;\n  padding: 0;\n  margin: 0;\n  pointer-events: ${(props) => (!props.disabled ? undefined : 'none')};\n  text-transform: uppercase;\n  width: 56px;\n  &:hover {\n    // background-color: ${(props) => props.theme.color.grey[800]};\n    background-color: #2c2560;\n  }\n`;\n\nconst StyledLink = styled(Link)`\n  align-items: center;\n  color: inherit;\n  display: flex;\n  flex: 1;\n  height: 56px;\n  justify-content: center;\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\n  text-decoration: none;\n`;\n\nexport default IconButton;\n"],"sourceRoot":""}