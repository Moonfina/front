{"version":3,"sources":["hooks/useBanks.ts","hooks/useEarnings.ts","hooks/useHarvest.ts","views/Bank/components/Harvest.tsx","hooks/useStake.ts","hooks/useStakedBalance.ts","hooks/useWithdraw.ts","views/Bank/components/DepositModal.tsx","views/Bank/components/WithdrawModal.tsx","views/Bank/components/Stake.tsx","hooks/useBank.ts","hooks/useStatsForPool.ts","hooks/useRedeem.ts","views/Bank/Bank.tsx","../node_modules/@material-ui/core/esm/CardActions/CardActions.js","hooks/useHandleTransactionReceipt.ts","components/CardIcon/CardIcon.tsx","components/UnlockWallet/UnlockWallet.tsx","hooks/useTombStats.ts","hooks/useApprove.ts","components/Spacer/Spacer.tsx","components/Value/Value.tsx","hooks/useLpStats.ts","hooks/useZap.ts","hooks/usetShareStats.ts","hooks/useStakedTokenPriceInDollars.ts","components/Icon/Icon.tsx","components/icons/AddIcon.tsx","components/icons/RemoveIcon.tsx","hooks/useApproveZapper.ts","views/Bank/components/ZapModal.tsx","components/PageHeader/PageHeader.tsx","components/IconButton/IconButton.tsx"],"names":["useBanks","useContext","BanksContext","banks","useEarnings","poolName","earnTokenName","poolId","useState","BigNumber","from","balance","setBalance","tombFinance","useTombFinance","isUnlocked","fetchBalance","useCallback","a","earnedFromBank","myAccount","useEffect","catch","err","console","error","stack","refreshBalance","setInterval","config","refreshInterval","clearInterval","useHarvest","bank","handleTransactionReceipt","useHandleTransactionReceipt","onReward","harvest","contract","StyledCardHeader","styled","div","StyledCardActions","props","theme","spacing","StyledCardContentInner","Harvest","earnings","tombStats","useTombStats","tShareStats","useShareStats","tokenName","tokenStats","tokenPriceInDollars","useMemo","Number","priceInDollars","toFixed","earnedInDollars","getDisplayBalance","Card","CardContent","CardIcon","TokenSymbol","symbol","earnToken","Value","value","Label","text","Button","onClick","disabled","eq","color","variant","useStake","onStake","amount","amountBn","parseUnits","depositToken","decimal","stake","depositTokenName","useStakedBalance","stakedBalanceOnBank","useWithdraw","onWithdraw","unstake","DepositModal","max","decimals","onConfirm","onDismiss","val","setVal","fullBalance","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","Modal","ModalTitle","TokenInput","onSelectMax","onChange","ModalActions","WithdrawModal","StyledActionSpacer","Stake","useApprove","address","approveStatus","approve","tokenBalance","ThemeContext","useTokenBalance","stakedBalance","stakedTokenPriceInDollars","useStakedTokenPriceInDollars","onZap","useZap","useModal","isNaN","onDismissDeposit","onPresentDeposit","ZapModal","zappingToken","onDissmissZap","onDismissWithdraw","onPresentWithdraw","size","ApprovalState","APPROVED","closedForStaking","PENDING","UNKNOWN","style","marginTop","IconButton","useBank","contractName","find","useStatsForPool","poolAPRs","setPoolAPRs","fetchAPRsForPool","getPoolAPRs","useRedeem","onRedeem","exit","useStyles","makeStyles","gridItem","height","breakpoints","up","LPTokenHelpText","pairName","uniswapUrl","tombAddr","TOMB","tshareAddr","TSHARE","startsWith","StyledLink","href","target","BankNotFound","Center","PageHeader","icon","title","subtitle","StyledBank","primary","main","StyledCardsWrapper","StyledCardWrapper","Bank","window","scrollTo","classes","bankId","useParams","account","useWallet","statsOnPool","name","Box","genesisFinished","Alert","severity","maxWidth","marginBottom","marginLeft","marginRight","Grid","container","justify","item","xs","md","lg","className","textAlign","Typography","yearlyAPR","dailyAPR","TVL","mt","Spacer","includes","UnlockWallet","CardActions","React","ref","_props$disableSpacing","disableSpacing","other","_objectWithoutProperties","_extends","clsx","root","withStyles","display","alignItems","padding","addTransaction","useTransactionAdder","addPopup","useAddPopup","promise","summary","then","tx","message","toLowerCase","slice","StyledCardIcon","children","position","top","left","transform","AccountButton","stat","setStat","fastRefresh","useRefresh","getTombStat","fetchTombPrice","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","token","spender","pendingApproval","useHasPendingApproval","currentAllowance","useAllowance","approvalState","lt","NOT_APPROVED","response","approval","tokenAddress","StyledSpacer","s","StyledValue","useLpStats","lpTicker","slowRefresh","getLPStat","fetchLpPrice","zapIn","getShareStat","fetchSharePrice","stakedTokenName","stakedToken","setStakedTokenPriceInDollars","getDepositTokenPriceInDollars","refreshStakedTokenPriceInDollars","StyledIcon","Icon","AddIcon","themeColor","viewBox","width","d","fill","grey","RemoveIcon","useApproveZapper","FTM_TICKER","FTM","TOMB_TICKER","TSHARE_TICKER","ZAPPER_ROUTER_ADDR","StyledDescriptionText","StyledMenuItem","backgroundColor","selected","MenuItem","ftmBalance","toString","tombBalance","tshareBalance","setZappingToken","zappingTokenBalance","setZappingTokenBalance","token0","token1","estimate","setEstimate","approveZapperStatus","approveZapper","tombFtmLpStats","tShareFtmLpStats","tombLPStats","tshareLPStats","ftmAmountPerLP","ftmAmount","n","parseFloat","isFinite","estimateZapIn","String","estimateZap","InputLabel","id","Select","event","labelId","StyledPageHeader","StyledTitle","h1","StyledSubtitle","h3","StyledButton","button","undefined","Link","to"],"mappings":"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","file":"static/js/3.a7000bc7.chunk.js","sourcesContent":["import { useContext } from 'react';\nimport { Context as BanksContext } from '../contexts/Banks';\n\nconst useBanks = () => {\n  const { banks } = useContext(BanksContext);\n  return [banks];\n};\n\nexport default useBanks;\n","import { useCallback, useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport useTombFinance from './useTombFinance';\nimport { ContractName } from '../tomb-finance';\nimport config from '../config';\n\nconst useEarnings = (poolName: ContractName, earnTokenName: String, poolId: Number) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await tombFinance.earnedFromBank(poolName, earnTokenName, poolId, tombFinance.myAccount);\n    setBalance(balance);\n  }, [poolName, earnTokenName, poolId, tombFinance]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(err.stack));\n\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [isUnlocked, poolName, tombFinance, fetchBalance]);\n\n  return balance;\n};\n\nexport default useEarnings;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport { Bank } from '../tomb-finance';\n\nconst useHarvest = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleReward = useCallback(() => {\n    handleTransactionReceipt(\n      tombFinance.harvest(bank.contract, bank.poolId),\n      `Claim ${bank.earnTokenName} from ${bank.contract}`,\n    );\n  }, [bank, tombFinance, handleTransactionReceipt]);\n\n  return { onReward: handleReward };\n};\n\nexport default useHarvest;\n","import React, { useMemo } from 'react';\nimport styled from 'styled-components';\n\nimport { Button, Card, CardContent } from '@material-ui/core';\n// import Button from '../../../components/Button';\n// import Card from '../../../components/Card';\n// import CardContent from '../../../components/CardContent';\nimport CardIcon from '../../../components/CardIcon';\nimport Label from '../../../components/Label';\nimport Value from '../../../components/Value';\n\nimport useEarnings from '../../../hooks/useEarnings';\nimport useHarvest from '../../../hooks/useHarvest';\n\nimport { getDisplayBalance } from '../../../utils/formatBalance';\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport { Bank } from '../../../tomb-finance';\nimport useTombStats from '../../../hooks/useTombStats';\nimport useShareStats from '../../../hooks/usetShareStats';\n\ninterface HarvestProps {\n  bank: Bank;\n}\n\nconst Harvest: React.FC<HarvestProps> = ({ bank }) => {\n  const earnings = useEarnings(bank.contract, bank.earnTokenName, bank.poolId);\n  const { onReward } = useHarvest(bank);\n  const tombStats = useTombStats();\n  const tShareStats = useShareStats();\n\n  const tokenName = bank.earnTokenName === 'XSHARES' ? 'XSHARES' : 'XOMB';\n  const tokenStats = bank.earnTokenName === 'XSHARES' ? tShareStats : tombStats;\n  const tokenPriceInDollars = useMemo(\n    () => (tokenStats ? Number(tokenStats.priceInDollars).toFixed(2) : null),\n    [tokenStats],\n  );\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\n  return (\n    <Card>\n      <CardContent>\n        <StyledCardContentInner>\n          <StyledCardHeader>\n            <CardIcon>\n              <TokenSymbol symbol={bank.earnToken.symbol} />\n            </CardIcon>\n            <Value value={getDisplayBalance(earnings)} />\n            <Label text={`≈ $${earnedInDollars}`} />\n            <Label text={`${tokenName} Earned`} />\n          </StyledCardHeader>\n          <StyledCardActions>\n            <Button onClick={onReward} disabled={earnings.eq(0)} color=\"primary\" variant=\"contained\">\n              Claim\n            </Button>\n          </StyledCardActions>\n        </StyledCardContentInner>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: ${(props) => props.theme.spacing[6]}px;\n  width: 100%;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport default Harvest;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport { parseUnits } from 'ethers/lib/utils';\n\nconst useStake = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleStake = useCallback(\n    (amount: string) => {\n      const amountBn = parseUnits(amount, bank.depositToken.decimal);\n      handleTransactionReceipt(\n        tombFinance.stake(bank.contract, bank.poolId, amountBn),\n        `Stake ${amount} ${bank.depositTokenName} to ${bank.contract}`,\n      );\n    },\n    [bank, tombFinance, handleTransactionReceipt],\n  );\n  return { onStake: handleStake };\n};\n\nexport default useStake;\n","import { useCallback, useEffect, useState } from 'react';\n\nimport { BigNumber } from 'ethers';\nimport useTombFinance from './useTombFinance';\nimport { ContractName } from '../tomb-finance';\nimport config from '../config';\n\nconst useStakedBalance = (poolName: ContractName, poolId: Number) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await tombFinance.stakedBalanceOnBank(poolName, poolId, tombFinance.myAccount);\n    setBalance(balance);\n  }, [poolName, poolId, tombFinance]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(err.stack));\n\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [isUnlocked, poolName, setBalance, tombFinance, fetchBalance]);\n\n  return balance;\n};\n\nexport default useStakedBalance;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport { parseUnits } from 'ethers/lib/utils';\n\nconst useWithdraw = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleWithdraw = useCallback(\n    (amount: string) => {\n      const amountBn = parseUnits(amount, bank.depositToken.decimal);\n      handleTransactionReceipt(\n        tombFinance.unstake(bank.contract, bank.poolId, amountBn),\n        `Withdraw ${amount} ${bank.depositTokenName} from ${bank.contract}`,\n      );\n    },\n    [bank, tombFinance, handleTransactionReceipt],\n  );\n  return { onWithdraw: handleWithdraw };\n};\n\nexport default useWithdraw;\n","import React, { useCallback, useMemo, useState } from 'react';\n\nimport { Button } from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, { ModalProps } from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\n\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\nimport { BigNumber } from 'ethers';\n\ninterface DepositModalProps extends ModalProps {\n  max: BigNumber;\n  decimals: number;\n  onConfirm: (amount: string) => void;\n  tokenName?: string;\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, decimals, onConfirm, onDismiss, tokenName = '' }) => {\n  const [val, setVal] = useState('');\n\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, decimals, false);\n  }, [max, decimals]);\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value);\n    },\n    [setVal],\n  );\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance);\n  }, [fullBalance, setVal]);\n\n  return (\n    <Modal>\n      <ModalTitle text={`Deposit ${tokenName}`} />\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        {/* <Button color=\"secondary\" variant=\"outlined\" onClick={onDismiss}>Cancel</Button> */}\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\n          Confirm\n        </Button>\n      </ModalActions>\n    </Modal>\n  );\n};\n\nexport default DepositModal;\n","import React, { useCallback, useMemo, useState } from 'react';\n\nimport { Button } from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, { ModalProps } from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\n\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\nimport { BigNumber } from 'ethers';\n\ninterface WithdrawModalProps extends ModalProps {\n  max: BigNumber;\n  onConfirm: (amount: string) => void;\n  tokenName?: string;\n  decimals?: number;\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', decimals = 18 }) => {\n  const [val, setVal] = useState('');\n\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, decimals, false);\n  }, [max, decimals]);\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value);\n    },\n    [setVal],\n  );\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance);\n  }, [fullBalance, setVal]);\n\n  return (\n    <Modal>\n      <ModalTitle text={`Withdraw ${tokenName}`} />\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\n          Confirm\n        </Button>\n        {/* <Button color=\"secondary\" onClick={onDismiss}>Cancel</Button> */}\n\n        {/* <Button text=\"Cancel\" variant=\"secondary\" onClick={onDismiss} />\n        <Button text=\"Confirm\" onClick={() => onConfirm(val)} /> */}\n      </ModalActions>\n    </Modal>\n  );\n};\n\nexport default WithdrawModal;\n","import React, { useMemo, useContext } from 'react';\nimport styled from 'styled-components';\n\n// import Button from '../../../components/Button';\nimport { Button, Card, CardContent } from '@material-ui/core';\n// import Card from '../../../components/Card';\n// import CardContent from '../../../components/CardContent';\nimport CardIcon from '../../../components/CardIcon';\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\nimport IconButton from '../../../components/IconButton';\nimport Label from '../../../components/Label';\nimport Value from '../../../components/Value';\nimport { ThemeContext } from 'styled-components';\n\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\nimport useModal from '../../../hooks/useModal';\nimport useStake from '../../../hooks/useStake';\nimport useZap from '../../../hooks/useZap';\nimport useStakedBalance from '../../../hooks/useStakedBalance';\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useWithdraw from '../../../hooks/useWithdraw';\n\nimport { getDisplayBalance } from '../../../utils/formatBalance';\n\nimport DepositModal from './DepositModal';\nimport WithdrawModal from './WithdrawModal';\nimport ZapModal from './ZapModal';\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport { Bank } from '../../../tomb-finance';\n\ninterface StakeProps {\n  bank: Bank;\n}\n\nconst Stake: React.FC<StakeProps> = ({ bank }) => {\n  const [approveStatus, approve] = useApprove(bank.depositToken, bank.address);\n\n  const { color: themeColor } = useContext(ThemeContext);\n  const tokenBalance = useTokenBalance(bank.depositToken);\n  const stakedBalance = useStakedBalance(bank.contract, bank.poolId);\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars(bank.depositTokenName, bank.depositToken);\n  const tokenPriceInDollars = useMemo(\n    () => (stakedTokenPriceInDollars ? stakedTokenPriceInDollars : null),\n    [stakedTokenPriceInDollars],\n  );\n  const earnedInDollars = (\n    Number(tokenPriceInDollars) * Number(getDisplayBalance(stakedBalance, bank.depositToken.decimal))\n  ).toFixed(2);\n  const { onStake } = useStake(bank);\n  const { onZap } = useZap(bank);\n  const { onWithdraw } = useWithdraw(bank);\n\n  const [onPresentDeposit, onDismissDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      decimals={bank.depositToken.decimal}\n      onConfirm={(amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        onStake(amount);\n        onDismissDeposit();\n      }}\n      tokenName={bank.depositTokenName}\n    />,\n  );\n\n  const [onPresentZap, onDissmissZap] = useModal(\n    <ZapModal\n      decimals={bank.depositToken.decimal}\n      onConfirm={(zappingToken, tokenName, amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        onZap(zappingToken, tokenName, amount);\n        onDissmissZap();\n      }}\n      tokenName={bank.depositTokenName}\n    />,\n  );\n\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\n    <WithdrawModal\n      max={stakedBalance}\n      decimals={bank.depositToken.decimal}\n      onConfirm={(amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        onWithdraw(amount);\n        onDismissWithdraw();\n      }}\n      tokenName={bank.depositTokenName}\n    />,\n  );\n\n  return (\n    <Card>\n      <CardContent>\n        <StyledCardContentInner>\n          <StyledCardHeader>\n            <CardIcon>\n              <TokenSymbol symbol={bank.depositToken.symbol} size={54} />\n            </CardIcon>\n            <Value value={getDisplayBalance(stakedBalance, bank.depositToken.decimal)} />\n            <Label text={`≈ $${earnedInDollars}`} />\n            <Label text={`${bank.depositTokenName} Staked`} />\n          </StyledCardHeader>\n          <StyledCardActions>\n            {approveStatus !== ApprovalState.APPROVED ? (\n              <Button\n                disabled={\n                  bank.closedForStaking ||\n                  approveStatus === ApprovalState.PENDING ||\n                  approveStatus === ApprovalState.UNKNOWN\n                }\n                onClick={approve}\n                color=\"primary\"\n                variant=\"contained\"\n                style={{ marginTop: '20px' }}\n              >\n                {`Approve ${bank.depositTokenName}`}\n              </Button>\n            ) : (\n              <>\n                <IconButton onClick={onPresentWithdraw}>\n                  <RemoveIcon />\n                </IconButton>\n                <StyledActionSpacer />\n                {/* <StyledActionSpacer />\n                <IconButton\n                  disabled={bank.closedForStaking || bank.depositTokenName === '2OMB-FTM-LP'}\n                  onClick={() => (bank.closedForStaking ? null : onPresentZap())}\n                >\n                  <FlashOnIcon style={{ color: themeColor.grey[400] }} />\n                </IconButton>\n                <StyledActionSpacer /> */}\n                <IconButton\n                  disabled={bank.closedForStaking}\n                  onClick={() => (bank.closedForStaking ? null : onPresentDeposit())}\n                >\n                  <AddIcon />\n                </IconButton>\n              </>\n            )}\n          </StyledCardActions>\n        </StyledCardContentInner>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 28px;\n  width: 100%;\n`;\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport default Stake;\n","import { useContext } from 'react';\nimport { Context as BanksContext } from '../contexts/Banks';\nimport { Bank, ContractName } from '../tomb-finance';\n\nconst useBank = (contractName: ContractName): Bank => {\n  const { banks } = useContext(BanksContext);\n  return banks.find((bank) => bank.contract === contractName);\n};\n\nexport default useBank;\n","import { useCallback, useState, useEffect } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport { PoolStats } from '../tomb-finance/types';\nimport config from '../config';\n\nconst useStatsForPool = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n\n  const [poolAPRs, setPoolAPRs] = useState<PoolStats>();\n\n  const fetchAPRsForPool = useCallback(async () => {\n    setPoolAPRs(await tombFinance.getPoolAPRs(bank));\n  }, [tombFinance, bank]);\n\n  useEffect(() => {\n    fetchAPRsForPool().catch((err) => console.error(`Failed to fetch TBOND price: ${err.stack}`));\n    const refreshInterval = setInterval(fetchAPRsForPool, config.refreshInterval);\n    return () => clearInterval(refreshInterval);\n  }, [setPoolAPRs, tombFinance, fetchAPRsForPool]);\n\n  return poolAPRs;\n};\n\nexport default useStatsForPool;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst useRedeem = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleRedeem = useCallback(() => {\n    handleTransactionReceipt(tombFinance.exit(bank.contract, bank.poolId), `Redeem ${bank.contract}`);\n  }, [bank, tombFinance, handleTransactionReceipt]);\n\n  return { onRedeem: handleRedeem };\n};\n\nexport default useRedeem;\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport { useParams } from 'react-router-dom';\nimport { useWallet } from 'use-wallet';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Box, Button, Card, CardContent, Typography, Grid } from '@material-ui/core';\n\nimport PageHeader from '../../components/PageHeader';\nimport Spacer from '../../components/Spacer';\nimport UnlockWallet from '../../components/UnlockWallet';\nimport Harvest from './components/Harvest';\nimport Stake from './components/Stake';\nimport useBank from '../../hooks/useBank';\nimport useStatsForPool from '../../hooks/useStatsForPool';\nimport useRedeem from '../../hooks/useRedeem';\nimport { Bank as BankEntity } from '../../tomb-finance';\nimport useTombFinance from '../../hooks/useTombFinance';\n\nimport { Alert } from '@material-ui/lab';\n\nconst useStyles = makeStyles((theme) => ({\n  gridItem: {\n    height: '100%',\n    [theme.breakpoints.up('md')]: {\n      height: '90px',\n    },\n  },\n}));\n\nconst Bank: React.FC = () => {\n  useEffect(() => window.scrollTo(0, 0));\n  const classes = useStyles();\n  const { bankId } = useParams();\n  const bank = useBank(bankId);\n\n  const { account } = useWallet();\n  const { onRedeem } = useRedeem(bank);\n  const statsOnPool = useStatsForPool(bank);\n\n  return account && bank ? (\n    <>\n      <PageHeader\n        icon=\"🏦\"\n        // subtitle={`Deposit ${bank?.depositTokenName} and earn ${bank?.earnTokenName}`}\n        title={bank?.name}\n      />\n      <Box>\n      {bank.genesisFinished ? \n          <Alert variant=\"filled\" severity=\"warning\" style={{ maxWidth: \"600px\", marginBottom: \"50px\", marginLeft: \"auto\", marginRight: \"auto\" }}>\n            Genesis Pools have ENDED. Please withdraw your funds.\n          </Alert> : <></>}\n        <Grid container justify=\"center\" spacing={3} style={{ marginBottom: '50px' }}>\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center' }}>\n                <Typography>APR</Typography>\n                <Typography>{bank.closedForStaking || bank.genesisFinished ? '0.00' : statsOnPool?.yearlyAPR}%</Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center' }}>\n                <Typography>Daily APR</Typography>\n                <Typography>{bank.closedForStaking || bank.genesisFinished ? '0.00' : statsOnPool?.dailyAPR}%</Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center' }}>\n                <Typography>TVL</Typography>\n                <Typography>${statsOnPool?.TVL}</Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n      <Box mt={5}>\n        <StyledBank>\n          <StyledCardsWrapper>\n            <StyledCardWrapper>\n              <Harvest bank={bank} />\n            </StyledCardWrapper>\n            <Spacer />\n            <StyledCardWrapper>{<Stake bank={bank} />}</StyledCardWrapper>\n          </StyledCardsWrapper>\n          <Spacer size=\"lg\" />\n          {bank.depositTokenName.includes('LP') && <LPTokenHelpText bank={bank} />}\n          <Spacer size=\"lg\" />\n          <div>\n            <Button onClick={onRedeem} color=\"primary\" variant=\"contained\">\n              Claim & Withdraw\n            </Button>\n          </div>\n          <Spacer size=\"lg\" />\n        </StyledBank>\n      </Box>\n    </>\n  ) : !bank ? (\n    <BankNotFound />\n  ) : (\n    <UnlockWallet />\n  );\n};\n\nconst LPTokenHelpText: React.FC<{ bank: BankEntity }> = ({ bank }) => {\n  const tombFinance = useTombFinance();\n  const tombAddr = tombFinance.TOMB.address;\n  const tshareAddr = tombFinance.TSHARE.address;\n\n  let pairName: string;\n  let uniswapUrl: string;\n  if (bank.depositTokenName.startsWith(\"2OMB-FTM\")) {\n    pairName = '2OMB-FTM pair';\n    uniswapUrl = 'https://spookyswap.finance/add/FTM/0x7a6e4e3cc2ac9924605dca4ba31d1831c84b44ae';\n  } else if (bank.depositTokenName.startsWith(\"2SHARE-FTM\")) {\n    pairName = '2SHARE-FTM pair';\n    uniswapUrl = 'https://spookyswap.finance/add/FTM/' + tshareAddr;\n  } else {\n    pairName = \"2OMB-2SHARE pair\";\n    uniswapUrl = 'https://spookyswap.finance/add/' + tombAddr + '/' + tshareAddr;\n  }\n  //waiting on jun LFG\n  return (\n    <Card>\n      <CardContent>\n        <StyledLink href={uniswapUrl} target=\"_blank\">\n          {`Provide or remove liquidity for ${pairName} on SpookySwap`}\n        </StyledLink>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst BankNotFound = () => {\n  return (\n    <Center>\n      <PageHeader icon=\"🏚\" title=\"Not Found\" subtitle=\"You've hit a bank just robbed by unicorns.\" />\n    </Center>\n  );\n};\n\nconst StyledBank = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst StyledLink = styled.a`\n  font-weight: 700;\n  text-decoration: none;\n  color: ${(props) => props.theme.color.primary.main};\n`;\n\nconst StyledCardsWrapper = styled.div`\n  display: flex;\n  width: 600px;\n  @media (max-width: 768px) {\n    width: 100%;\n    flex-flow: column nowrap;\n    align-items: center;\n  }\n`;\n\nconst StyledCardWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 80%;\n  }\n`;\n\nconst Center = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport default Bank;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8\n  },\n\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > :not(:first-child)': {\n      marginLeft: 8\n    }\n  }\n};\nvar CardActions = /*#__PURE__*/React.forwardRef(function CardActions(props, ref) {\n  var _props$disableSpacing = props.disableSpacing,\n      disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,\n      classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"disableSpacing\", \"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, !disableSpacing && classes.spacing),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActions.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   */\n  disableSpacing: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActions'\n})(CardActions);","import { useCallback } from 'react';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { useAddPopup } from '../state/application/hooks';\n\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\n  const addTransaction = useTransactionAdder();\n  const addPopup = useAddPopup();\n\n  return useCallback(\n    (promise: Promise<TransactionResponse>, summary: string) => {\n      promise\n        .then((tx) => addTransaction(tx, { summary }))\n        .catch((err) => {\n          if (err.message.includes('User denied')) {\n            // User denied transaction signature on MetaMask.\n            return;\n          }\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\n          console.error(`${message}: ${err.message || err.stack}`);\n          addPopup({ error: { message, stack: err.message || err.stack } });\n        });\n    },\n    [addPopup, addTransaction],\n  );\n}\n\nexport default useHandleTransactionReceipt;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface CardIconProps {\n  children?: React.ReactNode;\n}\n\nconst CardIcon: React.FC<CardIconProps> = ({ children }) => <StyledCardIcon>{children}</StyledCardIcon>;\n\nconst StyledCardIcon = styled.div`\nbackground-color: none;\nfont-size: 36px;\nheight: 95px;\nwidth: 95px;\nborder-radius: 40px;\nalign-items: center;\ndisplay: flex;\njustify-content: center;\nbox-shadow: none !important;\nmargin: 0 auto ${(props) => props.theme.spacing[3]}px;\n`;\n\nexport default CardIcon;\n","import React from 'react';\nimport { Box } from '@material-ui/core';\nimport AccountButton from '../Nav/AccountButton';\n\nconst UnlockWallet = () => {\n  return (\n    <Box style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\n      <AccountButton />\n      {/* <Button color=\"primary\" variant=\"contained\" onClick={() => connect('injected')}>Unlock Wallet</Button> */}\n    </Box>\n  );\n};\n\nexport default UnlockWallet;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { TokenStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useTombStats = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const { fastRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchTombPrice(){\n      try {\n        setStat(await tombFinance.getTombStat());\n      }\n      catch(err){\n        console.error(err)\n      }\n    }\n    fetchTombPrice();\n  }, [setStat, tombFinance, fastRefresh]);\n\n  return stat;\n};\n\nexport default useTombStats;\n","import { BigNumber, ethers } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport ERC20 from '../tomb-finance/ERC20';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApprove(token: ERC20, spender: string): [ApprovalState, () => Promise<void>] {\n  const pendingApproval = useHasPendingApproval(token.address, spender);\n  const currentAllowance = useAllowance(token, spender, pendingApproval);\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval]);\n\n  const addTransaction = useTransactionAdder();\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(spender, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: spender,\n      },\n    });\n  }, [approvalState, token, spender, addTransaction]);\n\n  return [approvalState, approve];\n}\n\nexport default useApprove;\n","import React, { useContext } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext);\n\n  let s: number;\n  switch (size) {\n    case 'lg':\n      s = spacing[6];\n      break;\n    case 'sm':\n      s = spacing[2];\n      break;\n    case 'md':\n    default:\n      s = spacing[4];\n  }\n\n  return <StyledSpacer size={s} />;\n};\n\ninterface StyledSpacerProps {\n  size: number;\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`;\n\nexport default Spacer;\n","import React from 'react';\n\nimport styled from 'styled-components';\n\ninterface ValueProps {\n  value: string;\n}\n\nconst Value: React.FC<ValueProps> = ({ value }) => {\n  return <StyledValue>{value}</StyledValue>;\n};\n\nconst StyledValue = styled.div`\n  font-size: 36px;\n  font-weight: 700;\n`;\n\nexport default Value;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { LPStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useLpStats = (lpTicker: string) => {\n  const [stat, setStat] = useState<LPStat>();\n  const { slowRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchLpPrice() {\n      try{\n        setStat(await tombFinance.getLPStat(lpTicker));\n      }\n      catch(err){\n        console.error(err);\n      }\n    }\n    fetchLpPrice();\n  }, [setStat, tombFinance, slowRefresh, lpTicker]);\n\n  return stat;\n};\n\nexport default useLpStats;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst useZap = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleZap = useCallback(\n    (zappingToken: string, tokenName: string, amount: string) => {\n      handleTransactionReceipt(\n        tombFinance.zapIn(zappingToken, tokenName, amount),\n        `Zap ${amount} in ${bank.depositTokenName}.`,\n      );\n    },\n    [bank, tombFinance, handleTransactionReceipt],\n  );\n  return { onZap: handleZap };\n};\n\nexport default useZap;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { TokenStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useShareStats = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const { slowRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchSharePrice() {\n      try {\n        setStat(await tombFinance.getShareStat());\n      } catch(err){\n        console.error(err)\n      }\n    }\n    fetchSharePrice();\n  }, [setStat, tombFinance, slowRefresh]);\n\n  return stat;\n};\n\nexport default useShareStats;\n","import { useCallback, useEffect, useState } from 'react';\n\nimport useTombFinance from './useTombFinance';\nimport config from '../config';\nimport ERC20 from '../tomb-finance/ERC20';\n\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await tombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\n    setStakedTokenPriceInDollars(balance);\n  }, [stakedToken, stakedTokenName, tombFinance]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(err.stack));\n\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\n    }\n  }, [isUnlocked, setStakedTokenPriceInDollars, tombFinance, fetchBalance]);\n\n  return stakedTokenPriceInDollars;\n};\n\nexport default useStakedTokenPriceInDollars;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport interface IconProps {\n  color?: string;\n  children?: string;\n}\n\nconst Icon: React.FC = ({ children }) => <StyledIcon>{children}</StyledIcon>;\n\nconst StyledIcon = styled.div``;\n\nexport default Icon;\n","import React, { useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\n\nimport Icon, { IconProps } from '../Icon';\n\nconst AddIcon: React.FC<IconProps> = ({ color }) => {\n  const { color: themeColor } = useContext(ThemeContext);\n  return (\n    <Icon>\n      <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" fill={color ? color : themeColor.grey[400]} />\n      </svg>\n    </Icon>\n  );\n};\n\nexport default AddIcon;\n","import React, { useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\n\nimport Icon, { IconProps } from '../Icon';\n\nconst RemoveIcon: React.FC<IconProps> = ({ color }) => {\n  const { color: themeColor } = useContext(ThemeContext);\n  return (\n    <Icon>\n      <svg viewBox=\"0 0 24 24\" fill={color ? color : themeColor.grey[400]} width=\"18px\" height=\"18px\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M19 13H5v-2h14v2z\" />\n      </svg>\n    </Icon>\n  );\n};\n\nexport default RemoveIcon;\n","import { BigNumber, ethers } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport ERC20 from '../tomb-finance/ERC20';\nimport { FTM_TICKER, TOMB_TICKER, TSHARE_TICKER, ZAPPER_ROUTER_ADDR } from '../utils/constants';\nimport useTombFinance from './useTombFinance';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApproveZapper(zappingToken: string): [ApprovalState, () => Promise<void>] {\n  const tombFinance = useTombFinance();\n  let token: ERC20;\n  if (zappingToken === FTM_TICKER) token = tombFinance.FTM;\n  else if (zappingToken === TOMB_TICKER) token = tombFinance.TOMB;\n  else if (zappingToken === TSHARE_TICKER) token = tombFinance.TSHARE;\n  const pendingApproval = useHasPendingApproval(token.address, ZAPPER_ROUTER_ADDR);\n  const currentAllowance = useAllowance(token, ZAPPER_ROUTER_ADDR, pendingApproval);\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (token === tombFinance.FTM) return ApprovalState.APPROVED;\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval, token, tombFinance]);\n\n  const addTransaction = useTransactionAdder();\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(ZAPPER_ROUTER_ADDR, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: ZAPPER_ROUTER_ADDR,\n      },\n    });\n  }, [approvalState, token, addTransaction]);\n\n  return [approvalState, approve];\n}\n\nexport default useApproveZapper;\n","import React, { useState, useMemo } from 'react';\n\nimport { Button, Select, MenuItem, InputLabel, Typography, withStyles } from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, { ModalProps } from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\nimport styled from 'styled-components';\n\nimport { getDisplayBalance } from '../../../utils/formatBalance';\nimport Label from '../../../components/Label';\nimport useLpStats from '../../../hooks/useLpStats';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useTombFinance from '../../../hooks/useTombFinance';\nimport { useWallet } from 'use-wallet';\nimport useApproveZapper, { ApprovalState } from '../../../hooks/useApproveZapper';\nimport { TOMB_TICKER, TSHARE_TICKER, FTM_TICKER } from '../../../utils/constants';\nimport { Alert } from '@material-ui/lab';\n\ninterface ZapProps extends ModalProps {\n  onConfirm: (zapAsset: string, lpName: string, amount: string) => void;\n  tokenName?: string;\n  decimals?: number;\n}\n\nconst ZapModal: React.FC<ZapProps> = ({ onConfirm, onDismiss, tokenName = '', decimals = 18 }) => {\n  const tombFinance = useTombFinance();\n  const { balance } = useWallet();\n  const ftmBalance = (Number(balance) / 1e18).toFixed(4).toString();\n  const tombBalance = useTokenBalance(tombFinance.TOMB);\n  const tshareBalance = useTokenBalance(tombFinance.TSHARE);\n  const [val, setVal] = useState('');\n  const [zappingToken, setZappingToken] = useState(FTM_TICKER);\n  const [zappingTokenBalance, setZappingTokenBalance] = useState(ftmBalance);\n  const [estimate, setEstimate] = useState({ token0: '0', token1: '0' }); // token0 will always be FTM in this case\n  const [approveZapperStatus, approveZapper] = useApproveZapper(zappingToken);\n  const tombFtmLpStats = useLpStats('XOMB-FTM-LP');\n  const tShareFtmLpStats = useLpStats('XSHARES-FTM-LP');\n  const tombLPStats = useMemo(() => (tombFtmLpStats ? tombFtmLpStats : null), [tombFtmLpStats]);\n  const tshareLPStats = useMemo(() => (tShareFtmLpStats ? tShareFtmLpStats : null), [tShareFtmLpStats]);\n  const ftmAmountPerLP = tokenName.startsWith(TOMB_TICKER) ? tombLPStats?.ftmAmount : tshareLPStats?.ftmAmount;\n\n  /**\n   * Checks if a value is a valid number or not\n   * @param n is the value to be evaluated for a number\n   * @returns\n   */\n  function isNumeric(n: any) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  const handleChangeAsset = (event: any) => {\n    const value = event.target.value;\n    setZappingToken(value);\n    setZappingTokenBalance(ftmBalance);\n    if (event.target.value === TSHARE_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(tshareBalance, decimals));\n    }\n    if (event.target.value === TOMB_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(tombBalance, decimals));\n    }\n  };\n\n  const handleChange = async (e: any) => {\n    if (e.currentTarget.value === '' || e.currentTarget.value === 0) {\n      setVal(e.currentTarget.value);\n      setEstimate({ token0: '0', token1: '0' });\n    }\n    if (!isNumeric(e.currentTarget.value)) return;\n    setVal(e.currentTarget.value);\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(e.currentTarget.value));\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\n  };\n\n  const handleSelectMax = async () => {\n    setVal(zappingTokenBalance);\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(zappingTokenBalance));\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\n  };\n\n  return (\n    <Modal>\n      <ModalTitle text={`Zap into ${tokenName}`} />\n      <StyledActionSpacer />\n      <InputLabel style={{ color: '#2c2560' }} id=\"label\">\n        Select asset to zap with\n      </InputLabel>\n      <Select\n        onChange={handleChangeAsset}\n        style={{ color: '#2c2560' }}\n        labelId=\"label\"\n        id=\"select\"\n        value={zappingToken}\n      >\n        <StyledMenuItem value={FTM_TICKER}>FTM</StyledMenuItem>\n        <StyledMenuItem value={TSHARE_TICKER}>2SHARES</StyledMenuItem>\n        {/* Tomb as an input for zapping will be disabled due to issues occuring with the Gatekeeper system */}\n        <StyledMenuItem value={TOMB_TICKER}>2OMB</StyledMenuItem>\n      </Select>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={zappingTokenBalance}\n        symbol={zappingToken}\n      />\n      <Label text=\"Zap Estimations\" />\n      <StyledDescriptionText>\n        {' '}\n        {tokenName}: {Number(estimate.token0) / Number(ftmAmountPerLP)}\n      </StyledDescriptionText>\n      <StyledDescriptionText>\n        {' '}\n        ({Number(estimate.token0)} {FTM_TICKER} / {Number(estimate.token1)}{' '}\n        {tokenName.startsWith(TOMB_TICKER) ? TOMB_TICKER : TSHARE_TICKER}){' '}\n      </StyledDescriptionText>\n      <ModalActions>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() =>\n            approveZapperStatus !== ApprovalState.APPROVED ? approveZapper() : onConfirm(zappingToken, tokenName, val)\n          }\n        >\n          {approveZapperStatus !== ApprovalState.APPROVED ? 'Approve' : \"Let's go\"}\n        </Button>\n      </ModalActions>\n\n      <StyledActionSpacer />\n      <Alert variant=\"filled\" severity=\"warning\">\n        Beta feature. Use at your own risk!\n      </Alert>\n    </Modal>\n  );\n};\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledDescriptionText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.color.grey[400]};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 22px;\n  justify-content: flex-start;\n`;\nconst StyledMenuItem = withStyles({\n  root: {\n    backgroundColor: 'white',\n    color: '#2c2560',\n    '&:hover': {\n      backgroundColor: 'grey',\n      color: '#2c2560',\n    },\n    selected: {\n      backgroundColor: 'black',\n    },\n  },\n})(MenuItem);\n\nexport default ZapModal;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface PageHeaderProps {\n  icon: React.ReactNode;\n  subtitle?: string;\n  title?: string;\n}\n\nconst PageHeader: React.FC<PageHeaderProps> = ({ icon, subtitle, title }) => {\n  return (\n    <StyledPageHeader>\n      {/* <StyledIcon>{icon}</StyledIcon> */}\n      <StyledTitle>{title}</StyledTitle>\n      <StyledSubtitle>{subtitle}</StyledSubtitle>\n    </StyledPageHeader>\n  );\n};\n\nconst StyledPageHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  padding-bottom: ${(props) => props.theme.spacing[6]}px;\n  padding-top: ${(props) => props.theme.spacing[6]}px;\n  max-width: 512px;\n  width: 100%;\n  margin: 0 auto;\n`;\n\nconst StyledTitle = styled.h1`\n  color: ${(props) => props.theme.color.grey[100]};\n  font-size: 36px;\n  font-weight: 700;\n  margin: 0;\n  padding: 0;\n`;\n\nconst StyledSubtitle = styled.h3`\n  color: ${(props) => props.theme.color.grey[400]};\n  font-size: 18px;\n  font-weight: 400;\n  margin: 0;\n  padding: 0;\n  text-align: center;\n`;\n\nexport default PageHeader;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Link } from 'react-router-dom';\n\ninterface IconButtonProps {\n  children?: React.ReactNode;\n  disabled?: boolean;\n  onClick?: () => void;\n  to?: string;\n}\n\nconst IconButton: React.FC<IconButtonProps> = ({ children, disabled, onClick, to }) => {\n  return (\n    <StyledButton disabled={disabled} onClick={onClick}>\n      {!!to ? <StyledLink to={to}>{children}</StyledLink> : children}\n    </StyledButton>\n  );\n};\n\ninterface StyledButtonProps {\n  disabled?: boolean;\n}\n/*\n  box-shadow: 6px 6px 12px ${props => props.theme.color.grey[600]},\n    -12px -12px 24px ${props => props.theme.color.grey[800]}aa;\n */\n\nconst StyledButton = styled.button<StyledButtonProps>`\n  align-items: center;\n  // background-color: ${(props) => props.theme.color.grey[!props.disabled ? 700 : 900]};\n  background-color: ${(props) => (!props.disabled ? '#571eb1' : props.theme.color.grey[900])};\n  border: 0;\n  border-radius: 28px;\n  color: ${(props) => (!props.disabled ? props.theme.color.primary.main : props.theme.color.grey[500])};\n  cursor: pointer;\n  display: flex;\n  font-weight: 700;\n  height: 56px;\n  justify-content: center;\n  letter-spacing: 1px;\n  outline: none;\n  padding: 0;\n  margin: 0;\n  pointer-events: ${(props) => (!props.disabled ? undefined : 'none')};\n  text-transform: uppercase;\n  width: 56px;\n  &:hover {\n    // background-color: ${(props) => props.theme.color.grey[800]};\n    background-color: #2c2560;\n  }\n`;\n\nconst StyledLink = styled(Link)`\n  align-items: center;\n  color: inherit;\n  display: flex;\n  flex: 1;\n  height: 56px;\n  justify-content: center;\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\n  text-decoration: none;\n`;\n\nexport default IconButton;\n"],"sourceRoot":""}