{"version":3,"sources":["state/application/hooks.ts","tomb-finance/config.ts","tomb-finance/ether-utils.ts","utils/provider.ts","tomb-finance/ERC20.ts","tomb-finance/TombFinance.ts","contexts/TombFinanceProvider/TombFinanceProvider.tsx","hooks/useTombFinance.ts","contexts/Banks/context.ts","contexts/Banks/Banks.tsx","utils/formatBalance.ts","contexts/Modals/Modals.tsx","contexts/RefreshContext/RefreshContextProvider.tsx","config.ts","state/application/actions.ts","hooks/useNetworkPrompt.ts","state/transactions/reducer.ts","state/application/reducer.ts","state/index.ts","theme/colors.ts","theme/index.ts","newTheme.js","hooks/useIsWindowVisible.ts","state/application/updater.ts","hooks/useDebounce.ts","state/transactions/updater.tsx","state/Updaters.tsx","components/Loader/index.js","components/Loader/Loader.js","components/Popups/TransactionPopup.tsx","components/Popups/ErrorPopup.tsx","components/Popups/PopupItem.tsx","components/Popups/index.tsx","App.tsx","serviceWorker.js","index.tsx","utils/constants.ts","state/transactions/actions.ts"],"names":["useBlockNumber","chainId","useWallet","useSelector","state","application","blockNumber","useAddPopup","dispatch","useDispatch","useCallback","content","key","addPopup","useRemovePopup","removePopup","useActivePopups","list","popupList","useMemo","filter","item","show","defaultEthereumConfig","testing","autoGasMultiplier","defaultConfirmations","defaultGas","defaultGasPrice","ethereumNodeTimeout","web3ProviderFrom","endpoint","config","ethConfig","Object","assign","includes","Web3","providers","WebsocketProvider","HttpProvider","timeout","decimalToBalance","d","decimals","parseUnits","String","provider","getDefaultProvider","ethers","Web3Provider","defaultProvider","ERC20","address","symbol","decimal","contract","this","Contract","ABI","signerOrProvider","estimateGas","totalSupply","account","balanceOf","recipient","amount","transfer","owner","spender","allowance","approve","sender","transferFrom","a","balance","formatUnits","supply","Number","toFixed","inputs","internalType","name","type","stateMutability","anonymous","indexed","outputs","TombFinance","cfg","myAccount","signer","contracts","externalTokens","masonryVersionOfUser","TOMBWFTM_LP","TOMB","TSHARE","TBOND","FTM","deployments","entries","deployment","abi","tomb","tShare","tBond","IUniswapV2PairABI","newProvider","getSigner","connect","tokens","values","console","log","fetchMasonryVersionOfUser","then","version","catch","err","error","stack","TombFtmRewardPool","TombFtmLpTombRewardPool","TombFtmLpTombRewardPoolOld","tombRewardPoolSupply","tombRewardPoolSupply2","tombRewardPoolSupplyOld","tombCirculatingSupply","sub","getTokenPriceFromPancakeswap","priceInFTM","getWFTMPriceFromPancakeswap","priceOfOneFTM","priceOfTombInDollars","tokenInFtm","priceInDollars","getDisplayBalance","circulatingSupply","lpToken","lpTokenSupplyBN","lpTokenSupply","token0","startsWith","isTomb","tokenAmountBN","tokenAmount","ftmAmountBN","ftmAmount","tokenAmountInOneLP","ftmAmountInOneLP","getLPTokenPrice","lpTokenPrice","lpTokenPriceFixed","toString","liquidity","priceOfOne","totalLiquidity","Treasury","getTombStat","tombStat","getBondPremiumRate","bondTombRatioBN","modifier","bondPriceInFTM","priceOfTBondInDollars","displayedTotalSupply","TombFtmLPTShareRewardPool","tShareCirculatingSupply","priceOfSharesInDollars","SeigniorageOracle","twap","utils","parseEther","expectedPrice","getTombUpdatedPrice","getBurnableTombLeft","bank","undefined","depositToken","poolContract","getDepositTokenPriceInDollars","depositTokenName","depositTokenPrice","stakeInPool","TVL","earnTokenName","getShareStat","stat","getTokenPerSecond","tokenPerSecond","tokenPerHour","mul","totalRewardPricePerYear","totalRewardPricePerDay","totalStakingTokenInPool","dailyAPR","yearlyAPR","contractName","endsWith","tombPerSecond","rewardPerSecond","div","poolStartTime","startDateTime","Date","toNumber","now","getTime","epochTombPerSecond","tSharePerSecond","tokenName","token","priceOfOneFtmInDollars","tokenPrice","getTokenPriceFromSpiritswap","epoch","getTombPrice","treasuryTombPrice","buyBonds","priceForTomb","redeemBonds","totalValue","bankDefinitions","bankInfo","pool","tokenAmountInPool","value","poolValue","isNaN","TSHAREPrice","currentMasonry","masonrytShareBalanceOf","masonryTVL","getFullDisplayBalance","tokenSupply","priceOfToken","tokenInLP","poolName","poolId","pendingTOMB","pendingShare","BigNumber","from","userInfo","deposit","withdraw","Masonry","tokenContract","ready","WFTM","wftm","Token","Fetcher","fetchPairData","wftmToToken","priceInBUSD","Route","midPrice","TokenSpirit","FetcherSpirit","liquidityToken","ftmBalanceInLP","shibaBalanceInLP","shibaAmount","priceOfShiba","FUSDT","fusdt_wftm_lp_pair","ftm_amount_BN","ftm_amount","fusdt_amount_BN","fusdt_amount","latestSnapshotIndex","masonryHistory","lastHistory","lastRewardsReceived","TOMBPrice","amountOfRewardsPerDay","realAPR","canClaimReward","canWithdraw","getStakedSharesOnMasonry","stakedAmount","notStaked","result","isOldMasonryMember","Error","stake","getShareOf","getCashEarningsOf","earned","claimDividends","claimReward","exit","nextEpochPoint","nextEpochTimestamp","nextAllocation","prevAllocation","to","currentEpoch","masons","mason","startTimeEpoch","epochTimerStart","PERIOD","period","periodInHours","rewardLockupEpochs","targetEpochForClaimUnlock","fromDate","toDate","delta","endDate","moment","add","PeriodInHours","withdrawLockupEpochs","assetName","window","ethereum","networkVersion","asset","assetUrl","request","method","params","options","image","tombAmount","TaxOffice","overrides","addLiquidityETHTaxFree","SpookyRouter","getReserves","_reserve0","_reserve1","quote","treasuryDaoFundedFilter","filters","DaoFundFunded","treasuryDevFundedFilter","DevFundFunded","treasuryMasonryFundedFilter","MasonryFunded","boughtBondsFilter","BoughtBonds","redeemBondsFilter","RedeemedBonds","epochBlocksRanges","queryFilter","masonryFundEvents","events","forEach","index","push","masonryFund","args","startBlock","boughBonds","redeemedBonds","endBlock","getBondsWithFilterForPeriod","bondsBought","bondsRedeemed","devFund","daoFund","bondsAmount","length","lpName","zapper","FTM_TICKER","estimateZapIn","SPOOKY_ROUTER_ADDR","estimate","TOMB_TICKER","estimateZapInToken","zapIn","zapInToken","tbondAmount","TShareSwapper","swapTBondToTShare","estimateAmountOfTShare","estimateBN","getTShareBalance","tshareBalanceBN","getTBondBalance","tbondBalanceBN","getTShareAmountPerTomb","rateTSharePerTombBN","tshareBalance","tbondBalance","rateTSharePerTomb","Context","createContext","tombFinance","TombFinanceProvider","children","useState","setTombFinance","useEffect","unlockWallet","Provider","useTombFinance","useContext","context","banks","Banks","setBanks","isUnlocked","fetchPools","finished","stakedBalanceOnBank","lte","earnToken","sort","b","fractionDigits","isTruncated","number","getBalance","ret","slice","pow","onPresent","onDismiss","StyledModalWrapper","styled","StyledModalBackdrop","Modals","isOpen","setIsOpen","setContent","handlePresent","modalContent","handleDismiss","onClick","React","isValidElement","cloneElement","RefreshContext","slow","fast","RefreshContextProvider","setSlow","setFast","interval","setInterval","prev","clearInterval","configurations","development","ChainId","FTMTESTNET","networkName","ftmscanUrl","require","WETH","MIM","baseLaunchDate","bondLaunchesAt","masonryLaunchesAt","refreshInterval","production","MAINNET","sectionInUI","multiplier","closedForStaking","genesisFinished","TombWethRewardPool","TombShibaRewardPool","TombTombRewardPool","TombFtmLPTombRewardPool","TombFtmLPTombRewardPoolOld","TshareFtmLPTShareRewardPool","updateBlockNumber","createAction","toggleWalletModal","toggleSettingsMenu","usePromptNetwork","networkPrompt","setNetworkPrompt","connectToNetwork","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","createReducer","builder","addCase","addTransaction","transactions","payload","hash","approval","summary","txs","addedTime","clearAllTransactions","checkedTransaction","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","walletModalOpen","settingsMenuOpen","action","removeAfterMs","popup","concat","nanoid","p","PERSISTED_KEYS","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","save","states","preloadedState","load","teal","200","theme","borderRadius","color","black","grey","100","300","400","500","600","700","800","900","purple","primary","light","main","secondary","white","siteWidth","spacing","1","2","3","4","5","6","7","topBarSize","newTheme","createMuiTheme","palette","text","background","default","paper","dark","contrastText","disabledBackground","active","hover","typography","fontFamily","join","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","Updater","windowVisible","focused","setFocused","listener","addEventListener","removeEventListener","useIsWindowVisible","setState","blockNumberCallback","getBlockNumber","on","removeListener","debouncedState","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","lastBlockNumber","keys","blocksSinceCheck","minutesPending","shouldCheck","getTransactionReceipt","blockHash","contractAddress","status","transactionHash","transactionIndex","txn","success","Updaters","Loader","style","position","left","top","transform","Typography","RowNoFlex","TransactionPopup","ThemeContext","paddingRight","size","StyledPopupDesc","StyledLink","target","href","span","props","ErrorPopup","message","copyErrorDetails","navigator","clipboard","writeText","StyledClose","X","Popup","Fader","AnimatedFader","animated","PopupItem","popKey","removeThisPopup","popupContent","faderStyle","useSpring","width","duration","text2","MobilePopupWrapper","height","MobilePopupInner","FixedPopupColumn","Popups","activePopups","map","reverse","Home","lazy","Cemetery","Pit","Dividends","NoMatch","Providers","connectors","walletconnect","rpcUrl","walletlink","url","appName","appLogoUrl","App","localStorage","version_app","clear","setItem","fallback","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","registration","unregister","TSHARE_TICKER","ZAPPER_ROUTER_ADDR"],"mappings":"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","file":"static/js/main.30749bb4.chunk.js","sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu } from './actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AppState } from '../index';\nimport { useWallet } from 'use-wallet';\n\nexport function useBlockNumber(): number | undefined {\n  const { chainId } = useWallet();\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1]);\n}\n\nexport function useWalletModalOpen(): boolean {\n  return useSelector((state: AppState) => state.application.walletModalOpen);\n}\n\nexport function useWalletModalToggle(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\n}\n\nexport function useSettingsMenuOpen(): boolean {\n  return useSelector((state: AppState) => state.application.settingsMenuOpen);\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\n}\n\n// returns a function that allows adding a popup\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\n  const dispatch = useDispatch();\n\n  return useCallback(\n    (content: PopupContent, key?: string) => {\n      dispatch(addPopup({ content, key }));\n    },\n    [dispatch],\n  );\n}\n\n// returns a function that allows removing a popup via its key\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useDispatch();\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({ key }));\n    },\n    [dispatch],\n  );\n}\n\n// get the list of active popups\nexport function useActivePopups(): AppState['application']['popupList'] {\n  const list = useSelector((state: AppState) => state.application.popupList);\n  return useMemo(() => list.filter((item) => item.show), [list]);\n}\n","import { Deployments } from './deployments';\nimport { ChainId } from '@spookyswap/sdk';\n\nexport type Configuration = {\n  chainId: ChainId;\n  networkName: string;\n  ftmscanUrl: string;\n  defaultProvider: string;\n  deployments: Deployments;\n  externalTokens: { [contractName: string]: [string, number] };\n  config?: EthereumConfig;\n\n  baseLaunchDate: Date;\n  bondLaunchesAt: Date;\n  masonryLaunchesAt: Date;\n\n  refreshInterval: number;\n};\n\nexport type EthereumConfig = {\n  testing: boolean;\n  autoGasMultiplier: number;\n  defaultConfirmations: number;\n  defaultGas: string;\n  defaultGasPrice: string;\n  ethereumNodeTimeout: number;\n};\n\nexport const defaultEthereumConfig = {\n  testing: false,\n  autoGasMultiplier: 1.5,\n  defaultConfirmations: 1,\n  defaultGas: '6000000',\n  defaultGasPrice: '1000000000000',\n  ethereumNodeTimeout: 10000,\n};\n","import Web3 from 'web3';\nimport { defaultEthereumConfig, EthereumConfig } from './config';\nimport { formatUnits, parseUnits } from 'ethers/lib/utils';\nimport { BigNumber } from 'ethers';\n\nexport function web3ProviderFrom(endpoint: string, config?: EthereumConfig): any {\n  const ethConfig = Object.assign(defaultEthereumConfig, config || {});\n\n  const providerClass = endpoint.includes('wss') ? Web3.providers.WebsocketProvider : Web3.providers.HttpProvider;\n\n  return new providerClass(endpoint, {\n    timeout: ethConfig.ethereumNodeTimeout,\n  });\n}\n\nexport function balanceToDecimal(s: string): string {\n  return formatUnits(s);\n}\n\nexport function decimalToBalance(d: string | number, decimals = 18): BigNumber {\n  return parseUnits(String(d), decimals);\n}\n","import { ethers } from 'ethers';\nimport config from '../config';\nimport { web3ProviderFrom } from '../tomb-finance/ether-utils';\n\nlet provider: ethers.providers.Web3Provider = null;\n\nexport function getDefaultProvider(): ethers.providers.Web3Provider {\n  if (!provider) {\n    provider = new ethers.providers.Web3Provider(web3ProviderFrom(config.defaultProvider), config.chainId);\n  }\n\n  return provider;\n}","import { BigNumber, Contract } from 'ethers';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport { Provider } from '@ethersproject/abstract-provider';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { formatUnits } from 'ethers/lib/utils';\n\nclass ERC20 {\n  private contract: Contract;\n\n  address: string;\n  symbol: string;\n  decimal: number;\n\n  constructor(address: string, provider: Signer | Provider, symbol: string, decimal = 18) {\n    this.contract = new Contract(address, ABI, provider);\n    this.address = address;\n    this.symbol = symbol;\n    this.decimal = decimal;\n  }\n\n  connect(signerOrProvider: Signer | Provider) {\n    this.contract = new Contract(this.address, ABI, signerOrProvider);\n  }\n\n  get estimateGas() {\n    return this.contract.estimateGas;\n  }\n\n  totalSupply(): Promise<BigNumber> {\n    return this.contract.totalSupply();\n  }\n\n  balanceOf(account: string): Promise<BigNumber> {\n    return this.contract.balanceOf(account);\n  }\n\n  transfer(recipient: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.transfer(recipient, amount);\n  }\n\n  allowance(owner: string, spender: string): Promise<BigNumber> {\n    return this.contract.allowance(owner, spender);\n  }\n\n  approve(spender: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.approve(spender, amount);\n  }\n\n  transferFrom(sender: string, recipient: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.transferFrom(sender, recipient, amount);\n  }\n\n  async displayedBalanceOf(account: string): Promise<string> {\n    const balance = await this.balanceOf(account);\n    return formatUnits(balance, this.decimal);\n  }\n\n  async displayedTotalSupply(): Promise<string> {\n    const supply = await this.totalSupply();\n    return Number(formatUnits(supply, this.decimal)).toFixed(0);\n  }\n}\n\nexport default ERC20;\n\nconst ABI = [\n  {\n    inputs: [\n      { internalType: 'string', name: 'name', type: 'string' },\n      {\n        internalType: 'string',\n        name: 'symbol',\n        type: 'string',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Approval',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        internalType: 'string',\n        name: '',\n        type: 'string',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        internalType: 'string',\n        name: '',\n        type: 'string',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        internalType: 'uint8',\n        name: '',\n        type: 'uint8',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'account',\n        type: 'address',\n      },\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'addedValue',\n        type: 'uint256',\n      },\n    ],\n    name: 'increaseAllowance',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'subtractedValue',\n        type: 'uint256',\n      },\n    ],\n    name: 'decreaseAllowance',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n","// import { Fetcher, Route, Token } from '@uniswap/sdk';\nimport { Fetcher as FetcherSpirit, Token as TokenSpirit } from '@spiritswap/sdk';\nimport { Fetcher, Route, Token } from '@spookyswap/sdk';\nimport { Configuration } from './config';\nimport { ContractName, TokenStat, AllocationTime, LPStat, Bank, PoolStats, TShareSwapperStat } from './types';\nimport { BigNumber, Contract, ethers, EventFilter } from 'ethers';\nimport { decimalToBalance } from './ether-utils';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport ERC20 from './ERC20';\nimport { getFullDisplayBalance, getDisplayBalance } from '../utils/formatBalance';\nimport { getDefaultProvider } from '../utils/provider';\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\nimport config, { bankDefinitions } from '../config';\nimport { genesisDefinitions } from '../config';\n\nimport moment from 'moment';\nimport { parseUnits } from 'ethers/lib/utils';\nimport { FTM_TICKER, SPOOKY_ROUTER_ADDR, TOMB_TICKER } from '../utils/constants';\n/**\n * An API module of 2omb Finance contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class TombFinance {\n  myAccount: string;\n  provider: ethers.providers.Web3Provider;\n  signer?: ethers.Signer;\n  config: Configuration;\n  contracts: { [name: string]: Contract };\n  externalTokens: { [name: string]: ERC20 };\n  masonryVersionOfUser?: string;\n\n  TOMBWFTM_LP: Contract;\n  TOMB: ERC20;\n  TSHARE: ERC20;\n  TBOND: ERC20;\n  FTM: ERC20;\n\n  constructor(cfg: Configuration) {\n    const { deployments, externalTokens } = cfg;\n    const provider = getDefaultProvider();\n\n    // loads contracts from deployments\n    this.contracts = {};\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\n    }\n    this.externalTokens = {};\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\n    }\n    this.TOMB = new ERC20(deployments.tomb.address, provider, 'XOMB');\n    this.TSHARE = new ERC20(deployments.tShare.address, provider, 'XSHARES');\n    this.TBOND = new ERC20(deployments.tBond.address, provider, 'XBOND');\n    this.FTM = this.externalTokens['WFTM'];\n\n    // Uniswap V2 Pair\n    this.TOMBWFTM_LP = new Contract(externalTokens['XOMB-FTM-LP'][0], IUniswapV2PairABI, provider);\n\n    this.config = cfg;\n    this.provider = provider;\n  }\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n    const tokens = [this.TOMB, this.TSHARE, this.TBOND, ...Object.values(this.externalTokens)];\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n    this.TOMBWFTM_LP = this.TOMBWFTM_LP.connect(this.signer);\n    console.log(`🔓 Wallet is unlocked. Welcome, ${account}!`);\n    this.fetchMasonryVersionOfUser()\n      .then((version) => (this.masonryVersionOfUser = version))\n      .catch((err) => {\n        console.error(`Failed to fetch masonry version: ${err.stack}`);\n        this.masonryVersionOfUser = 'latest';\n      });\n  }\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //===================FROM SPOOKY TO DISPLAY =========================\n  //=========================IN HOME PAGE==============================\n  //===================================================================\n\n  async getTombStat(): Promise<TokenStat> {\n    const { TombFtmRewardPool, TombFtmLpTombRewardPool, TombFtmLpTombRewardPoolOld } = this.contracts;\n    const supply = await this.TOMB.totalSupply();\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(TombFtmRewardPool.address);\n    const tombRewardPoolSupply2 = await this.TOMB.balanceOf(TombFtmLpTombRewardPool.address);\n    const tombRewardPoolSupplyOld = await this.TOMB.balanceOf(TombFtmLpTombRewardPoolOld.address);\n    const tombCirculatingSupply = supply\n      .sub(tombRewardPoolSupply)\n      .sub(tombRewardPoolSupply2)\n      .sub(tombRewardPoolSupplyOld);\n    const priceInFTM = await this.getTokenPriceFromPancakeswap(this.TOMB);\n    const priceOfOneFTM = await this.getWFTMPriceFromPancakeswap();\n    const priceOfTombInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\n\n    return {\n      tokenInFtm: priceInFTM,\n      priceInDollars: priceOfTombInDollars,\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0),\n    };\n  }\n\n  /**\n   * Calculates various stats for the requested LP\n   * @param name of the LP token to load stats for\n   * @returns\n   */\n  async getLPStat(name: string): Promise<LPStat> {\n    const lpToken = this.externalTokens[name];\n    const lpTokenSupplyBN = await lpToken.totalSupply();\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\n    const token0 = name.startsWith('XOMB') ? this.TOMB : this.TSHARE;\n    const isTomb = name.startsWith('XOMB');\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\n\n    const ftmAmountBN = await this.FTM.balanceOf(lpToken.address);\n    const ftmAmount = getDisplayBalance(ftmAmountBN, 18);\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\n    const ftmAmountInOneLP = Number(ftmAmount) / Number(lpTokenSupply);\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isTomb);\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\n    return {\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\n      priceOfOne: lpTokenPriceFixed,\n      totalLiquidity: liquidity,\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Use this method to get price for Tomb\n   * @returns TokenStat for TBOND\n   * priceInFTM\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getBondStat(): Promise<TokenStat> {\n    const { Treasury } = this.contracts;\n    const tombStat = await this.getTombStat();\n    const bondTombRatioBN = await Treasury.getBondPremiumRate();\n    const modifier = bondTombRatioBN / 1e18 > 1 ? bondTombRatioBN / 1e18 : 1;\n    const bondPriceInFTM = (Number(tombStat.tokenInFtm) * modifier).toFixed(2);\n    const priceOfTBondInDollars = (Number(tombStat.priceInDollars) * modifier).toFixed(2);\n    const supply = await this.TBOND.displayedTotalSupply();\n    return {\n      tokenInFtm: bondPriceInFTM,\n      priceInDollars: priceOfTBondInDollars,\n      totalSupply: supply,\n      circulatingSupply: supply,\n    };\n  }\n\n  /**\n   * @returns TokenStat for TSHARE\n   * priceInFTM\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getShareStat(): Promise<TokenStat> {\n    const { TombFtmLPTShareRewardPool } = this.contracts;\n\n    const supply = await this.TSHARE.totalSupply();\n\n    const priceInFTM = await this.getTokenPriceFromPancakeswap(this.TSHARE);\n    const tombRewardPoolSupply = await this.TSHARE.balanceOf(TombFtmLPTShareRewardPool.address);\n    const tShareCirculatingSupply = supply.sub(tombRewardPoolSupply);\n    const priceOfOneFTM = await this.getWFTMPriceFromPancakeswap();\n    const priceOfSharesInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\n\n    return {\n      tokenInFtm: priceInFTM,\n      priceInDollars: priceOfSharesInDollars,\n      totalSupply: getDisplayBalance(supply, this.TSHARE.decimal, 0),\n      circulatingSupply: getDisplayBalance(tShareCirculatingSupply, this.TSHARE.decimal, 0),\n    };\n  }\n\n  async getTombStatInEstimatedTWAP(): Promise<TokenStat> {\n    const { SeigniorageOracle, TombFtmRewardPool } = this.contracts;\n    const expectedPrice = await SeigniorageOracle.twap(this.TOMB.address, ethers.utils.parseEther('1'));\n\n    const supply = await this.TOMB.totalSupply();\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(TombFtmRewardPool.address);\n    const tombCirculatingSupply = supply.sub(tombRewardPoolSupply);\n    return {\n      tokenInFtm: getDisplayBalance(expectedPrice),\n      priceInDollars: getDisplayBalance(expectedPrice),\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0),\n    };\n  }\n\n  async getTombPriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getTombUpdatedPrice();\n  }\n\n  async getBondsPurchasable(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBurnableTombLeft();\n  }\n\n  /**\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\n   * @param bank\n   * @returns\n   */\n  async getPoolAPRs(bank: Bank): Promise<PoolStats> {\n    if (this.myAccount === undefined) return;\n    const depositToken = bank.depositToken;\n    console.log(\"deposit token:\", depositToken);\n    const poolContract = this.contracts[bank.contract];\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\n    console.log(\"deposit token price:\", depositTokenPrice);\n    const stakeInPool = await depositToken.balanceOf(bank.address);\n    console.log(\"stake in pool:\", stakeInPool);\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const stat = bank.earnTokenName === 'XOMB' ? await this.getTombStat() : await this.getShareStat();\n    const tokenPerSecond = await this.getTokenPerSecond(\n      bank.earnTokenName,\n      bank.contract,\n      poolContract,\n      bank.depositTokenName,\n    );\n\n    const tokenPerHour = tokenPerSecond.mul(60).mul(60);\n    const totalRewardPricePerYear =\n      Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n    const totalStakingTokenInPool =\n      Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\n    const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\n    return {\n      dailyAPR: dailyAPR.toFixed(2).toString(),\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\n      TVL: TVL.toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Method to return the amount of tokens the pool yields per second\n   * @param earnTokenName the name of the token that the pool is earning\n   * @param contractName the contract of the pool/bank\n   * @param poolContract the actual contract of the pool\n   * @returns\n   */\n  async getTokenPerSecond(\n    earnTokenName: string,\n    contractName: string,\n    poolContract: Contract,\n    depositTokenName: string,\n  ) {\n    if (earnTokenName === 'XOMB') {\n      if (!contractName.endsWith('TombRewardPool')) {\n        const rewardPerSecond = (await poolContract.tombPerSecond()).mul(20);\n        if (depositTokenName === 'WFTM') {\n          return rewardPerSecond.mul(6000).div(11000).div(24); // 6000\n        } else if (depositTokenName === 'WETH') {\n          return rewardPerSecond.mul(3000).div(11000).div(24); // 2500\n        } else if (depositTokenName === 'TOMB') {\n          return rewardPerSecond.mul(6000).div(11000).div(24); // 1000\n        } else if (depositTokenName === 'MIM') {\n          return rewardPerSecond.mul(1500).div(11000).div(24); // 1000\n        }\n        return rewardPerSecond.div(24);\n      }\n      const poolStartTime = await poolContract.poolStartTime();\n      const startDateTime = new Date(poolStartTime.toNumber() * 1000);\n      const FOUR_DAYS = 4 * 24 * 60 * 60 * 1000;\n      if (Date.now() - startDateTime.getTime() > FOUR_DAYS) {\n        return await poolContract.epochTombPerSecond(1);\n      }\n      return await poolContract.epochTombPerSecond(0);\n    }\n    const rewardPerSecond = await poolContract.tSharePerSecond();\n    if (depositTokenName.startsWith('XOMB-FTM')) {\n      return rewardPerSecond.mul(30000).div(59500);\n    } else if (depositTokenName.startsWith('XSHARES-FTM')) {\n      return rewardPerSecond.mul(24000).div(59500);\n    } else {\n      return rewardPerSecond.mul(5500).div(59500)\n    }\n  }\n\n  /**\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\n   * If the deposited token is an LP it will find the price of its pieces\n   * @param tokenName\n   * @param pool\n   * @param token\n   * @returns\n   */\n  async getDepositTokenPriceInDollars(tokenName: string, token: ERC20) {\n    let tokenPrice;\n    const priceOfOneFtmInDollars = await this.getWFTMPriceFromPancakeswap();\n    if (tokenName === 'WFTM') {\n      tokenPrice = priceOfOneFtmInDollars;\n    } else {\n      if (tokenName === 'XOMB-FTM-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.TOMB, true);\n      } else if (tokenName === 'XSHARES-FTM-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.TSHARE, false);\n      } else if (tokenName === \"XOMB-XSHARES-LP\") {\n        tokenPrice = await this.getLPTokenPrice(token, this.TOMB, true);\n      } else if (tokenName === 'SHIBA') {\n        tokenPrice = await this.getTokenPriceFromSpiritswap(token);\n      } else {\n        tokenPrice = await this.getTokenPriceFromPancakeswap(token);\n        tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\n      }\n    }\n    return tokenPrice;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //=========================== END ===================================\n  //===================================================================\n\n  async getCurrentEpoch(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.epoch();\n  }\n\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBondPremiumRate();\n  }\n\n  /**\n   * Buy bonds with cash.\n   * @param amount amount of cash to purchase bonds with.\n   */\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const treasuryTombPrice = await Treasury.getTombPrice();\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryTombPrice);\n  }\n\n  /**\n   * Redeem bonds for cash.\n   * @param amount amount of bonds to redeem.\n   */\n  async redeemBonds(amount: string): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const priceForTomb = await Treasury.getTombPrice();\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForTomb);\n  }\n\n  // async getTotalValueLocked(): Promise<Number> {\n    \n  //   let totalValue = 0;\n  //   for (const bankInfo of Object.values(bankDefinitions)) {\n  //     const pool = this.contracts[bankInfo.contract];\n  //     const token = this.externalTokens[bankInfo.depositTokenName];\n  //     const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\n  //     const tokenAmountInPool = await token.balanceOf(pool.address);\n  //     const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\n  //     const poolValue = Number.isNaN(value) ? 0 : value;\n  //     totalValue += poolValue;\n  //   }\n\n  //   return totalValue;\n  // }\n\n  async getTotalValueLocked(): Promise<Number> {\n    let totalValue = 0;\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      const pool = this.contracts[bankInfo.contract];\n      const token = this.externalTokens[bankInfo.depositTokenName];\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\n      const tokenAmountInPool = await token.balanceOf(pool.address);\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\n      const poolValue = Number.isNaN(value) ? 0 : value;\n      totalValue += poolValue;\n    }\n\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(this.currentMasonry().address);\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\n\n    return totalValue + masonryTVL;\n  }\n\n  /**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be FTM in most cases)\n   * @param isTomb sanity check for usage of tomb token or tShare\n   * @returns price of the LP token\n   */\n  async getLPTokenPrice(lpToken: ERC20, token: ERC20, isTomb: boolean): Promise<string> {\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\n    //Get amount of tokenA\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\n    const stat = isTomb === true ? await this.getTombStat() : await this.getShareStat();\n    const priceOfToken = stat.priceInDollars;\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n      .toString();\n    return tokenPrice;\n  }\n\n  async earnedFromBank(\n    poolName: ContractName,\n    earnTokenName: String,\n    poolId: Number,\n    account = this.myAccount,\n  ): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      if (earnTokenName === 'XOMB') {\n        // problem is pendingTOMB isnt a function since the abi still says pendingTOMB\n        return await pool.pendingTOMB(poolId, account);\n      } else {\n        return await pool.pendingShare(poolId, account);\n      }\n    } catch (err) {\n      console.error(`Failed to call earned() on pool ${pool.address}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async stakedBalanceOnBank(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      let userInfo = await pool.userInfo(poolId, account);\n      return await userInfo.amount;\n    } catch (err) {\n      console.error(`Failed to call balanceOf() on pool ${pool.address}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async stake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.deposit(poolId, amount);\n  }\n\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async unstake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.withdraw(poolId, amount);\n  }\n\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n  async harvest(poolName: ContractName, poolId: Number): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\n    return await pool.withdraw(poolId, 0);\n  }\n\n  /**\n   * Harvests and withdraws deposited tokens from the pool.\n   */\n  async exit(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    let userInfo = await pool.userInfo(poolId, account);\n    return await pool.withdraw(poolId, userInfo.amount);\n  }\n\n  async fetchMasonryVersionOfUser(): Promise<string> {\n    return 'latest';\n  }\n\n  currentMasonry(): Contract {\n    if (!this.masonryVersionOfUser) {\n      //throw new Error('you must unlock the wallet to continue.');\n    }\n    return this.contracts.Masonry;\n  }\n\n  isOldMasonryMember(): boolean {\n    return this.masonryVersionOfUser !== 'latest';\n  }\n\n  async getTokenPriceFromPancakeswap(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { chainId } = this.config;\n    const { WFTM } = this.config.externalTokens;\n\n    const wftm = new Token(chainId, WFTM[0], WFTM[1]);\n    const token = new Token(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wftmToToken = await Fetcher.fetchPairData(wftm, token, this.provider);\n      const priceInBUSD = new Route([wftmToToken], token);\n\n      return priceInBUSD.midPrice.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromSpiritswap(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { chainId } = this.config;\n\n    const { WFTM } = this.externalTokens;\n\n    const wftm = new TokenSpirit(chainId, WFTM.address, WFTM.decimal);\n    const token = new TokenSpirit(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wftmToToken = await FetcherSpirit.fetchPairData(wftm, token, this.provider);\n      const liquidityToken = wftmToToken.liquidityToken;\n      let ftmBalanceInLP = await WFTM.balanceOf(liquidityToken.address);\n      let ftmAmount = Number(getFullDisplayBalance(ftmBalanceInLP, WFTM.decimal));\n      let shibaBalanceInLP = await tokenContract.balanceOf(liquidityToken.address);\n      let shibaAmount = Number(getFullDisplayBalance(shibaBalanceInLP, tokenContract.decimal));\n      const priceOfOneFtmInDollars = await this.getWFTMPriceFromPancakeswap();\n      let priceOfShiba = (ftmAmount / shibaAmount) * Number(priceOfOneFtmInDollars);\n      return priceOfShiba.toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getWFTMPriceFromPancakeswap(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { WFTM, FUSDT } = this.externalTokens;\n    try {\n      const fusdt_wftm_lp_pair = this.externalTokens['USDT-FTM-LP'];\n      let ftm_amount_BN = await WFTM.balanceOf(fusdt_wftm_lp_pair.address);\n      let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, WFTM.decimal));\n      let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_wftm_lp_pair.address);\n      let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\n      return (fusdt_amount / ftm_amount).toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of WFTM: ${err}`);\n    }\n  }\n\n  //===================================================================\n  //===================================================================\n  //===================== MASONRY METHODS =============================\n  //===================================================================\n  //===================================================================\n\n  async getMasonryAPR() {\n    const Masonry = this.currentMasonry();\n    const latestSnapshotIndex = await Masonry.latestSnapshotIndex();\n    const lastHistory = await Masonry.masonryHistory(latestSnapshotIndex);\n\n    const lastRewardsReceived = lastHistory[1];\n\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const TOMBPrice = (await this.getTombStat()).priceInDollars;\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\n\n    //Mgod formula\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(TOMBPrice) * 4;\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(Masonry.address);\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\n    const realAPR = ((amountOfRewardsPerDay * 100) / masonryTVL) * 365;\n    return realAPR;\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Masonry\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserClaimRewardFromMasonry(): Promise<boolean> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.canClaimReward(this.myAccount);\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Masonry\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserUnstakeFromMasonry(): Promise<boolean> {\n    const Masonry = this.currentMasonry();\n    const canWithdraw = await Masonry.canWithdraw(this.myAccount);\n    const stakedAmount = await this.getStakedSharesOnMasonry();\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.TSHARE.decimal)) === 0;\n    const result = notStaked ? true : canWithdraw;\n    return result;\n  }\n\n  async timeUntilClaimRewardFromMasonry(): Promise<BigNumber> {\n    // const Masonry = this.currentMasonry();\n    // const mason = await Masonry.masons(this.myAccount);\n    return BigNumber.from(0);\n  }\n\n  async getTotalStakedInMasonry(): Promise<BigNumber> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.totalSupply();\n  }\n\n  async stakeShareToMasonry(amount: string): Promise<TransactionResponse> {\n    if (this.isOldMasonryMember()) {\n      throw new Error(\"you're using old masonry. please withdraw and deposit the TSHARE again.\");\n    }\n    const Masonry = this.currentMasonry();\n    return await Masonry.stake(decimalToBalance(amount));\n  }\n\n  async getStakedSharesOnMasonry(): Promise<BigNumber> {\n    const Masonry = this.currentMasonry();\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.getShareOf(this.myAccount);\n    }\n    return await Masonry.balanceOf(this.myAccount);\n  }\n\n  async getEarningsOnMasonry(): Promise<BigNumber> {\n    const Masonry = this.currentMasonry();\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.getCashEarningsOf(this.myAccount);\n    }\n    return await Masonry.earned(this.myAccount);\n  }\n\n  async withdrawShareFromMasonry(amount: string): Promise<TransactionResponse> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.withdraw(decimalToBalance(amount));\n  }\n\n  async harvestCashFromMasonry(): Promise<TransactionResponse> {\n    const Masonry = this.currentMasonry();\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.claimDividends();\n    }\n    return await Masonry.claimReward();\n  }\n\n  async exitFromMasonry(): Promise<TransactionResponse> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.exit();\n  }\n\n  async getTreasuryNextAllocationTime(): Promise<AllocationTime> {\n    const { Treasury } = this.contracts;\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\n    const prevAllocation = new Date(Date.now());\n\n    return { from: prevAllocation, to: nextAllocation };\n  }\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to claim\n   * their reward from the masonry\n   * @returns Promise<AllocationTime>\n   */\n  async getUserClaimRewardTime(): Promise<AllocationTime> {\n    const { Masonry, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Masonry.nextEpochPoint(); //in unix timestamp\n    const currentEpoch = await Masonry.epoch();\n    const mason = await Masonry.masons(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\n    const rewardLockupEpochs = await Masonry.rewardLockupEpochs();\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\n\n    const fromDate = new Date(Date.now());\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\n      const endDate = moment(toDate)\n        .add(delta * periodInHours, 'hours')\n        .toDate();\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to unstake\n   * from the masonry\n   * @returns Promise<AllocationTime>\n   */\n  async getUserUnstakeTime(): Promise<AllocationTime> {\n    const { Masonry, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Masonry.nextEpochPoint();\n    const currentEpoch = await Masonry.epoch();\n    const mason = await Masonry.masons(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const PeriodInHours = period / 60 / 60;\n    const withdrawLockupEpochs = await Masonry.withdrawLockupEpochs();\n    const fromDate = new Date(Date.now());\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\n    const stakedAmount = await this.getStakedSharesOnMasonry();\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\n      const endDate = moment(toDate)\n        .add(delta * PeriodInHours, 'hours')\n        .toDate();\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  async watchAssetInMetamask(assetName: string): Promise<boolean> {\n    const { ethereum } = window as any;\n    if (ethereum && ethereum.networkVersion === config.chainId.toString()) {\n      let asset;\n      let assetUrl;\n      if (assetName === 'TOMB') {\n        asset = this.TOMB;\n        assetUrl = 'https://tomb.finance/presskit/tomb_icon_noBG.png';\n      } else if (assetName === 'TSHARE') {\n        asset = this.TSHARE;\n        assetUrl = 'https://tomb.finance/presskit/tshare_icon_noBG.png';\n      } else if (assetName === 'TBOND') {\n        asset = this.TBOND;\n        assetUrl = 'https://tomb.finance/presskit/tbond_icon_noBG.png';\n      }\n      await ethereum.request({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20',\n          options: {\n            address: asset.address,\n            symbol: asset.symbol,\n            decimals: 18,\n            image: assetUrl,\n          },\n        },\n      });\n    }\n    return true;\n  }\n\n  async provideTombFtmLP(ftmAmount: string, tombAmount: BigNumber): Promise<TransactionResponse> {\n    const { TaxOffice } = this.contracts;\n    let overrides = {\n      value: parseUnits(ftmAmount, 18),\n    };\n    return await TaxOffice.addLiquidityETHTaxFree(tombAmount, tombAmount.mul(992).div(1000), parseUnits(ftmAmount, 18).mul(992).div(1000), overrides);\n  }\n\n  async quoteFromSpooky(tokenAmount: string, tokenName: string): Promise<string> {\n    const { SpookyRouter } = this.contracts;\n    const { _reserve0, _reserve1 } = await this.TOMBWFTM_LP.getReserves();\n    let quote;\n    if (tokenName === 'TOMB') {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve1, _reserve0);\n    } else {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve0, _reserve1);\n    }\n    return (quote / 1e18).toString();\n  }\n\n  /**\n   * @returns an array of the regulation events till the most up to date epoch\n   */\n  async listenForRegulationsEvents(): Promise<any> {\n    const { Treasury } = this.contracts;\n\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\n    const treasuryMasonryFundedFilter = Treasury.filters.MasonryFunded();\n    const boughtBondsFilter = Treasury.filters.BoughtBonds();\n    const redeemBondsFilter = Treasury.filters.RedeemedBonds();\n\n    let epochBlocksRanges: any[] = [];\n    let masonryFundEvents = await Treasury.queryFilter(treasuryMasonryFundedFilter);\n    var events: any[] = [];\n    masonryFundEvents.forEach(function callback(value, index) {\n      events.push({ epoch: index + 1 });\n      events[index].masonryFund = getDisplayBalance(value.args[1]);\n      if (index === 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n      }\n      if (index > 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n        epochBlocksRanges[index - 1].endBlock = value.blockNumber;\n      }\n    });\n\n    epochBlocksRanges.forEach(async (value, index) => {\n      events[index].bondsBought = await this.getBondsWithFilterForPeriod(\n        boughtBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n      events[index].bondsRedeemed = await this.getBondsWithFilterForPeriod(\n        redeemBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n    });\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\n    DEVFundEvents.forEach(function callback(value, index) {\n      events[index].devFund = getDisplayBalance(value.args[1]);\n    });\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\n    DAOFundEvents.forEach(function callback(value, index) {\n      events[index].daoFund = getDisplayBalance(value.args[1]);\n    });\n    return events;\n  }\n\n  /**\n   * Helper method\n   * @param filter applied on the query to the treasury events\n   * @param from block number\n   * @param to block number\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\n   */\n  async getBondsWithFilterForPeriod(filter: EventFilter, from: number, to: number): Promise<number> {\n    const { Treasury } = this.contracts;\n    const bondsAmount = await Treasury.queryFilter(filter, from, to);\n    return bondsAmount.length;\n  }\n\n  async estimateZapIn(tokenName: string, lpName: string, amount: string): Promise<number[]> {\n    const { zapper } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    let estimate;\n    if (tokenName === FTM_TICKER) {\n      estimate = await zapper.estimateZapIn(lpToken.address, SPOOKY_ROUTER_ADDR, parseUnits(amount, 18));\n    } else {\n      const token = tokenName === TOMB_TICKER ? this.TOMB : this.TSHARE;\n      estimate = await zapper.estimateZapInToken(\n        token.address,\n        lpToken.address,\n        SPOOKY_ROUTER_ADDR,\n        parseUnits(amount, 18),\n      );\n    }\n    return [estimate[0] / 1e18, estimate[1] / 1e18];\n  }\n  async zapIn(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\n    const { zapper } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    if (tokenName === FTM_TICKER) {\n      let overrides = {\n        value: parseUnits(amount, 18),\n      };\n      return await zapper.zapIn(lpToken.address, SPOOKY_ROUTER_ADDR, this.myAccount, overrides);\n    } else {\n      const token = tokenName === TOMB_TICKER ? this.TOMB : this.TSHARE;\n      return await zapper.zapInToken(\n        token.address,\n        parseUnits(amount, 18),\n        lpToken.address,\n        SPOOKY_ROUTER_ADDR,\n        this.myAccount,\n      );\n    }\n  }\n  async swapTBondToTShare(tbondAmount: BigNumber): Promise<TransactionResponse> {\n    const { TShareSwapper } = this.contracts;\n    return await TShareSwapper.swapTBondToTShare(tbondAmount);\n  }\n  async estimateAmountOfTShare(tbondAmount: string): Promise<string> {\n    const { TShareSwapper } = this.contracts;\n    try {\n      const estimateBN = await TShareSwapper.estimateAmountOfTShare(parseUnits(tbondAmount, 18));\n      return getDisplayBalance(estimateBN, 18, 6);\n    } catch (err) {\n      console.error(`Failed to fetch estimate tshare amount: ${err}`);\n    }\n  }\n\n  async getTShareSwapperStat(address: string): Promise<TShareSwapperStat> {\n    const { TShareSwapper } = this.contracts;\n    const tshareBalanceBN = await TShareSwapper.getTShareBalance();\n    const tbondBalanceBN = await TShareSwapper.getTBondBalance(address);\n    // const tombPriceBN = await TShareSwapper.getTombPrice();\n    // const tsharePriceBN = await TShareSwapper.getTSharePrice();\n    const rateTSharePerTombBN = await TShareSwapper.getTShareAmountPerTomb();\n    const tshareBalance = getDisplayBalance(tshareBalanceBN, 18, 5);\n    const tbondBalance = getDisplayBalance(tbondBalanceBN, 18, 5);\n    return {\n      tshareBalance: tshareBalance.toString(),\n      tbondBalance: tbondBalance.toString(),\n      // tombPrice: tombPriceBN.toString(),\n      // tsharePrice: tsharePriceBN.toString(),\n      rateTSharePerTomb: rateTSharePerTombBN.toString(),\n    };\n  }\n}\n","import React, { createContext, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport TombFinance from '../../tomb-finance';\nimport config from '../../config';\n\nexport interface TombFinanceContext {\n  tombFinance?: TombFinance;\n}\n\nexport const Context = createContext<TombFinanceContext>({ tombFinance: null });\n\nexport const TombFinanceProvider: React.FC = ({ children }) => {\n  const { ethereum, account } = useWallet();\n  const [tombFinance, setTombFinance] = useState<TombFinance>();\n\n  useEffect(() => {\n    if (!tombFinance) {\n      const tomb = new TombFinance(config);\n      if (account) {\n        // wallet was unlocked at initialization\n        tomb.unlockWallet(ethereum, account);\n      }\n      setTombFinance(tomb);\n    } else if (account) {\n      tombFinance.unlockWallet(ethereum, account);\n    }\n  }, [account, ethereum, tombFinance]);\n\n  return <Context.Provider value={{ tombFinance }}>{children}</Context.Provider>;\n};\n","import { useContext } from 'react';\nimport { Context } from '../contexts/TombFinanceProvider';\n\nconst useTombFinance = () => {\n  const { tombFinance } = useContext(Context);\n  return tombFinance;\n};\n\nexport default useTombFinance;\n","import { createContext } from 'react';\nimport { Bank } from '../../tomb-finance';\n\nexport interface BanksContext {\n  banks: Bank[];\n}\n\nconst context = createContext<BanksContext>({\n  banks: [],\n});\n\nexport default context;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport Context from './context';\nimport useTombFinance from '../../hooks/useTombFinance';\nimport { Bank } from '../../tomb-finance';\nimport config, { bankDefinitions } from '../../config';\n\nconst Banks: React.FC = ({ children }) => {\n  const [banks, setBanks] = useState<Bank[]>([]);\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  const fetchPools = useCallback(async () => {\n    const banks: Bank[] = [];\n\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      if (bankInfo.finished) {\n        if (!tombFinance.isUnlocked) continue;\n\n        // only show pools staked by user\n        const balance = await tombFinance.stakedBalanceOnBank(\n          bankInfo.contract,\n          bankInfo.poolId,\n          tombFinance.myAccount,\n        );\n        if (balance.lte(0)) {\n          continue;\n        }\n      }\n      banks.push({\n        ...bankInfo,\n        address: config.deployments[bankInfo.contract].address,\n        depositToken: tombFinance.externalTokens[bankInfo.depositTokenName],\n        earnToken: bankInfo.earnTokenName === '2OMB' ? tombFinance.TOMB : tombFinance.TSHARE,\n      });\n    }\n    banks.sort((a, b) => (a.sort > b.sort ? 1 : -1));\n    setBanks(banks);\n  }, [tombFinance, setBanks]);\n\n  useEffect(() => {\n    if (tombFinance) {\n      fetchPools().catch((err) => console.error(`Failed to fetch pools: ${err.stack}`));\n    }\n  }, [isUnlocked, tombFinance, fetchPools]);\n\n  return <Context.Provider value={{ banks }}>{children}</Context.Provider>;\n};\n\nexport default Banks;\n","import { BigNumber } from 'ethers';\n\nexport const getDisplayBalance = (\n  balance: BigNumber,\n  decimals = 18,\n  fractionDigits = 4,\n  isTruncated: boolean = false,\n) => {\n  if (decimals === 0) {\n    fractionDigits = 0;\n  }\n  const number = getBalance(balance, decimals - fractionDigits);\n  const ret = (number / 10 ** fractionDigits).toFixed(fractionDigits);\n  if (ret.length > 12 && isTruncated) {\n    return ret.slice(0, 12) + '...';\n  }\n  return ret;\n};\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, isTruncated = false) => {\n  return getDisplayBalance(balance, decimals, 4, isTruncated);\n};\n\nexport function getBalance(balance: BigNumber, decimals = 18): number {\n  return Number(balance.div(BigNumber.from(10).pow(decimals)));\n}\n","import React, { createContext, useCallback, useState } from 'react';\nimport styled from 'styled-components';\n\ninterface ModalsContext {\n  content?: React.ReactNode;\n  isOpen?: boolean;\n  onPresent: (content: React.ReactNode) => void;\n  onDismiss: () => void;\n}\n\nexport const Context = createContext<ModalsContext>({\n  onPresent: () => {},\n  onDismiss: () => {},\n});\n\nconst Modals: React.FC = ({ children }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [content, setContent] = useState<React.ReactNode>();\n\n  const handlePresent = useCallback(\n    (modalContent: React.ReactNode) => {\n      setContent(modalContent);\n      setIsOpen(true);\n    },\n    [setContent, setIsOpen],\n  );\n\n  const handleDismiss = useCallback(() => {\n    setContent(undefined);\n    setIsOpen(false);\n  }, [setContent, setIsOpen]);\n\n  return (\n    <Context.Provider\n      value={{\n        content,\n        isOpen,\n        onPresent: handlePresent,\n        onDismiss: handleDismiss,\n      }}\n    >\n      {children}\n      {isOpen && (\n        <StyledModalWrapper>\n          <StyledModalBackdrop onClick={handleDismiss} />\n          {React.isValidElement(content) &&\n            React.cloneElement(content, {\n              onDismiss: handleDismiss,\n            })}\n        </StyledModalWrapper>\n      )}\n    </Context.Provider>\n  );\n};\n\nconst StyledModalWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nconst StyledModalBackdrop = styled.div`\n  background-color: #00000088;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nexport default Modals;\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nexport const RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nexport const RefreshContextProvider: React.FC = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => { \n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\n","// import { ChainId } from '@pancakeswap-libs/sdk';\nimport { ChainId } from '@spookyswap/sdk';\nimport { Configuration } from './tomb-finance/config';\nimport { BankInfo } from './tomb-finance';\n\nconst configurations: { [env: string]: Configuration } = {\n  development: {\n    chainId: ChainId.FTMTESTNET,\n    networkName: 'Fantom Opera Testnet',\n    ftmscanUrl: 'https://testnet.ftmscan.com',\n    defaultProvider: 'https://rpc.testnet.fantom.network/',\n    deployments: require('./tomb-finance/deployments/deployments.testing.json'),\n    externalTokens: {\n      WFTM: ['0xf1277d1ed8ad466beddf92ef448a132661956621', 18],\n      FUSDT: ['0xb7f24e6e708eabfaa9e64b40ee21a5adbffb51d6', 6],\n      WETH: ['0x74b23882a30290451A17c44f4F05243b6b58C76d', 18],\n      TOMB: ['0x2317610e609674e53D9039aaB85D8cAd8485A7c5', 0],\n      MIM: ['0x39523112753956d19A3d6a30E758bd9FF7a8F3C0', 9],\n      'USDT-FTM-LP': ['0xE7e3461C2C03c18301F66Abc9dA1F385f45047bA', 18],\n      '2OMB-FTM-LP': ['0x13Fe199F19c8F719652985488F150762A5E9c3A8', 18],\n      '2SHARE-FTM-LP': ['0x20bc90bB41228cb9ab412036F80CE4Ef0cAf1BD5', 18],\n      '2OMB-2SHARE-LP': ['0xd9B5f00d183df52D717046521152303129F088DD', 18],\n      'XOMB': ['0xB744963604f069d9AC04808b844791E9d18Bfa79', 18],\n      'XOMB-FTM-LP': ['0x284F865E8E43C21cc54c2b944fB90CA644c4F34a', 18],\n     \n\n    },\n    baseLaunchDate: new Date('2021-06-02 13:00:00Z'),\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\n    masonryLaunchesAt: new Date('2020-12-11T00:00:00Z'),\n    refreshInterval: 10000,\n  },\n  production: {\n    chainId: ChainId.MAINNET,\n    networkName: 'Fantom Opera Mainnet',\n    ftmscanUrl: 'https://ftmscan.com',\n    defaultProvider: 'https://rpc.ftm.tools/',\n    deployments: require('./tomb-finance/deployments/deployments.mainnet.json'),\n    externalTokens: {\n      WFTM: ['0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83', 18],\n      FUSDT: ['0x04068DA6C83AFCFA0e13ba15A6696662335D5B75', 6], // This is actually usdc on mainnet not fusdt\n      WETH: ['0x74b23882a30290451A17c44f4F05243b6b58C76d', 18], // BOO: 0x841FAD6EAe12c286d1Fd18d1d525DFfA75C7EFFE 18\n      TOMB: ['0x6c021ae822bea943b2e66552bde1d2696a53fbb7', 18], // ZOO: 0x09e145a1d53c0045f41aeef25d8ff982ae74dd56 0\n      MIM: ['0x82f0b8b456c1a451378467398982d4834b6829c1', 18], // SHIBA: 0x9ba3e4f84a34df4e08c112e1a0ff148b81655615 9\n      'USDT-FTM-LP': ['0x2b4C76d0dc16BE1C31D4C1DC53bF9B45987Fc75c', 18],\n      '2OMB-FTM-LP': ['0xbdc7dfb7b88183e87f003ca6b5a2f81202343478', 18], // \n      '2SHARE-FTM-LP': ['0x6398ACBBAB2561553a9e458Ab67dCFbD58944e52', 18],\n      '2OMB-2SHARE-LP': ['0xd9B5f00d183df52D717046521152303129F088DD', 18],\n      'XOMB': ['0xB744963604f069d9AC04808b844791E9d18Bfa79', 18],\n      'XOMB-FTM-LP': ['0x284F865E8E43C21cc54c2b944fB90CA644c4F34a', 18],\n      'XSHARES': ['0x3Af15D1e310DD7Adfaf4a9DdD0E366C6F0FF9Fa6', 18],\n      'XSHARES-FTM-LP': ['0x5b056Cb1c47E57f282b1Dc92a93aE1A02e81C780', 18],\n\n    },\n    baseLaunchDate: new Date('2021-06-02 13:00:00Z'),\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\n    masonryLaunchesAt: new Date('2020-12-11T00:00:00Z'),\n    refreshInterval: 10000,\n  },\n};\n\nexport const genesisDefinitions: { [contractName: string]: BankInfo } = {\n  /*\n  Explanation:\n  name: description of the card\n  poolId: the poolId assigned in the contract\n  sectionInUI: way to distinguish in which of the 3 pool groups it should be listed\n        - 0 = Single asset stake pools\n        - 1 = LP asset staking rewarding TOMB\n        - 2 = LP asset staking rewarding TSHARE\n  contract: the contract name which will be loaded from the deployment.environmnet.json\n  depositTokenName : the name of the token to be deposited\n  earnTokenName: the rewarded token\n  finished: will disable the pool on the UI if set to true\n  sort: the order of the pool\n  */\n  TombFtmRewardPool: {\n    name: 'Stake WFTM, earn 2OMB',\n    poolId: 0,\n    sectionInUI: 0,\n    contract: 'TombFtmRewardPool',\n    depositTokenName: 'WFTM',\n    earnTokenName: '2OMB',\n    multiplier: \"100x\",\n    finished: false,\n    sort: 1,\n    closedForStaking: false,\n  },\n  TombWethRewardPool: {\n    name: 'Stake wETH, earn 2OMB',\n    poolId: 1,\n    sectionInUI: 0,\n    contract: 'TombWethGenesisRewardPool',\n    depositTokenName: 'WETH',\n    earnTokenName: '2OMB',\n    multiplier: \"50x\",\n    finished: false,\n    sort: 2,\n    closedForStaking: false,\n  },\n  TombShibaRewardPool: {\n    name: 'Stake MIM, earn 2OMB',\n    poolId: 2,\n    sectionInUI: 0,\n    contract: 'TombShibaGenesisRewardPool',\n    depositTokenName: 'MIM',\n    earnTokenName: '2OMB',\n    multiplier: \"25x\",\n    finished: false,\n    sort: 3,\n    closedForStaking: false,\n  },\n  TombTombRewardPool: {\n    name: 'Stake TOMB, earn 2OMB',\n    poolId: 3,\n    sectionInUI: 0,\n    contract: 'TombTombGenesisRewardPool',\n    depositTokenName: 'TOMB',\n    earnTokenName: '2OMB',\n    multiplier: \"100x\",\n    finished: false,\n    sort: 4,\n    closedForStaking: false,\n  },\n}\n\nexport const bankDefinitions: { [contractName: string]: BankInfo } = {\n  /*\n  Explanation:\n  name: description of the card\n  poolId: the poolId assigned in the contract\n  sectionInUI: way to distinguish in which of the 3 pool groups it should be listed\n        - 0 = Single asset stake pools\n        - 1 = LP asset staking rewarding TOMB\n        - 2 = LP asset staking rewarding TSHARE\n  contract: the contract name which will be loaded from the deployment.environmnet.json\n  depositTokenName : the name of the token to be deposited\n  earnTokenName: the rewarded token\n  finished: will disable the pool on the UI if set to true\n  sort: the order of the pool\n  */\n  TombFtmRewardPool: {\n    name: 'Stake WFTM, earn 2OMB',\n    poolId: 0,\n    sectionInUI: 0,\n    contract: 'TombFtmRewardPool',\n    depositTokenName: 'WFTM',\n    earnTokenName: 'XOMB',\n    multiplier: \"100x\",\n    finished: false,\n    sort: 1,\n    closedForStaking: false,\n    genesisFinished: false\n  },\n  TombWethRewardPool: {\n    name: 'Stake wETH, earn 2OMB',\n    poolId: 1,\n    sectionInUI: 0,\n    contract: 'TombWethGenesisRewardPool',\n    depositTokenName: 'WETH',\n    earnTokenName: 'XOMB',\n    multiplier: \"50x\",\n    finished: false,\n    sort: 2,\n    closedForStaking: false,\n    genesisFinished: false\n  },\n  TombShibaRewardPool: {\n    name: 'Stake MIM, earn 2OMB',\n    poolId: 2,\n    sectionInUI: 0,\n    contract: 'TombShibaGenesisRewardPool',\n    depositTokenName: 'MIM',\n    earnTokenName: 'XOMB',\n    multiplier: \"25x\",\n    finished: false,\n    sort: 3,\n    closedForStaking: false,\n    genesisFinished: false\n  },\n  TombTombRewardPool: {\n    name: 'Stake TOMB, earn 2OMB',\n    poolId: 3,\n    sectionInUI: 0,\n    contract: 'TombTombGenesisRewardPool',\n    depositTokenName: 'TOMB',\n    earnTokenName: '2OMB',\n    multiplier: \"100x\",\n    finished: false,\n    sort: 4,\n    closedForStaking: false,\n    genesisFinished: false\n  },\n  TombFtmLPTombRewardPool: {\n    name: 'Earn 2OMB by 2OMB-WFTM',\n    poolId: 0,\n    sectionInUI: 1,\n    contract: 'TombFtmLpTombRewardPool',\n    depositTokenName: '2OMB-FTM-LP',\n    earnTokenName: '2OMB',\n    multiplier: \"1000x\",\n    finished: false,\n    sort: 5,\n    closedForStaking: false,\n  },\n  TombFtmLPTombRewardPoolOld: {\n    name: 'Earn TOMB by TOMB-FTM LP',\n    poolId: 0,\n    sectionInUI: 1,\n    contract: 'TombFtmLpTombRewardPoolOld',\n    depositTokenName: '2OMB-FTM-LP',\n    earnTokenName: 'TOMB',\n    multiplier: \"0\",\n    finished: true,\n    sort: 11,\n    closedForStaking: true,\n  },\n  TombFtmLPTShareRewardPool: {\n    name: 'Earn 2SHARE by 2OMB-WFTM LP',\n    poolId: 0,\n    sectionInUI: 2,\n    contract: 'TombFtmLPTShareRewardPool',\n    depositTokenName: 'XOMB-FTM-LP',\n    earnTokenName: 'XSHARES',\n    multiplier: \"3000x\",\n    finished: false,\n    sort: 6,\n    closedForStaking: false,\n  },\n  TshareFtmLPTShareRewardPool: {\n    name: 'Earn 2SHARE by 2SHARE-WFTM LP',\n    poolId: 1,\n    sectionInUI: 2,\n    contract: 'TshareFtmLPTShareRewardPool',\n    depositTokenName: 'XSHARES-FTM-LP',\n    earnTokenName: 'XSHARES',\n    multiplier: \"2400x\",\n    finished: false,\n    sort: 7,\n    closedForStaking: false,\n  },\n\n  /*\n  TombTshareLPTShareRewardPool: {\n    name: 'Earn 2SHARE by 2OMB-2SHARE LP',\n    poolId: 2,\n    sectionInUI: 2,\n    contract: 'TombTshareLPTShareRewardPool',\n    depositTokenName: 'XOMB-XSHARES-LP',\n    earnTokenName: 'XSHARES',\n    multiplier: \"550x\",\n    finished: false,\n    sort: 8,\n    closedForStaking: false,\n  },\n*/\n\n  // TshareDividends: {\n  //   name: 'Earn USDC dividends by staking 2SHARES',\n  //   poolId: 0,\n  //   sectionInUI: 3,\n  //   contract: 'TombTshareLPTShareRewardPool',\n  //   depositTokenName: '2SHARES',\n  //   earnTokenName: 'USDC',\n  //   multiplier: \"0x\",\n  //   finished: false,\n  //   sort: 9,\n  //   closedForStaking: false,\n  // },\n};\n\nexport default configurations['production'];\n","import { createAction } from '@reduxjs/toolkit';\n\nexport type PopupContent = {\n  txn?: {\n    hash: string;\n    success: boolean;\n    summary?: string;\n  };\n  error?: {\n    message: string;\n    stack: string;\n  };\n};\n\nexport const updateBlockNumber = createAction<{ chainId: number; blockNumber: number }>('app/updateBlockNumber');\n\nexport const toggleWalletModal = createAction<void>('app/toggleWalletModal');\n\nexport const toggleSettingsMenu = createAction<void>('app/toggleSettingsMenu');\n\nexport const addPopup = createAction<{\n  key?: string;\n  removeAfterMs?: number | null;\n  content: PopupContent;\n}>('app/addPopup');\n\nexport const removePopup = createAction<{ key: string }>('app/removePopup');\n","import { useEffect, useState } from 'react';\nimport config from './../config';\n\nconst usePromptNetwork = () => {\n  const [networkPrompt, setNetworkPrompt] = useState(false);\n  const { ethereum } = window as any;\n\n  /**\n   * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\n   * And https://docs.metamask.io/guide/ethereum-provider.html\n   * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\n   * @returns\n   */\n  const connectToNetwork = async (provider: any) => {\n    await provider.request({\n      method: 'wallet_addEthereumChain',\n      params: [\n        {\n          chainId: `0x${config.chainId.toString(16)}`,\n          chainName: config.networkName,\n          nativeCurrency: {\n            name: 'FTM',\n            symbol: 'ftm',\n            decimals: 18,\n          },\n          rpcUrls: [config.defaultProvider],\n          blockExplorerUrls: [config.ftmscanUrl],\n        },\n      ],\n    });\n  };\n  useEffect(() => {\n    if (!networkPrompt) {\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\n        connectToNetwork(ethereum);\n        setNetworkPrompt(true);\n      }\n    }\n  }, [networkPrompt, ethereum]);\n};\n\nexport default usePromptNetwork;\n","import { createReducer } from '@reduxjs/toolkit';\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  SerializableTransactionReceipt,\n} from './actions';\n\nconst now = () => new Date().getTime();\n\nexport interface TransactionDetails {\n  hash: string;\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  receipt?: SerializableTransactionReceipt;\n  lastCheckedBlockNumber?: number;\n  addedTime: number;\n  confirmedTime?: number;\n  from: string;\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails;\n  };\n}\n\nexport const initialState: TransactionState = {};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, approval, summary } }) => {\n      if (transactions[chainId]?.[hash]) {\n        throw Error('Attempted to add existing transaction.');\n      }\n      const txs = transactions[chainId] ?? {};\n      txs[hash] = { hash, approval, summary, from, addedTime: now() };\n      transactions[chainId] = txs;\n    })\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\n      if (!transactions[chainId]) return;\n      transactions[chainId] = {};\n    })\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber;\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n      }\n    })\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      tx.receipt = receipt;\n      tx.confirmedTime = now();\n    }),\n);\n","import { createReducer, nanoid } from '@reduxjs/toolkit';\nimport {\n  addPopup,\n  PopupContent,\n  removePopup,\n  toggleWalletModal,\n  toggleSettingsMenu,\n  updateBlockNumber,\n} from './actions';\n\ntype PopupList = Array<{\n  key: string;\n  show: boolean;\n  content: PopupContent;\n  removeAfterMs: number | null;\n}>;\n\nexport interface ApplicationState {\n  blockNumber: { [chainId: number]: number };\n  popupList: PopupList;\n  walletModalOpen: boolean;\n  settingsMenuOpen: boolean;\n}\n\nconst initialState: ApplicationState = {\n  blockNumber: {},\n  popupList: [],\n  walletModalOpen: false,\n  settingsMenuOpen: false,\n};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(updateBlockNumber, (state, action) => {\n      const { chainId, blockNumber } = action.payload;\n      if (typeof state.blockNumber[chainId] !== 'number') {\n        state.blockNumber[chainId] = blockNumber;\n      } else {\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\n      }\n    })\n    .addCase(toggleWalletModal, (state) => {\n      state.walletModalOpen = !state.walletModalOpen;\n    })\n    .addCase(toggleSettingsMenu, (state) => {\n      state.settingsMenuOpen = !state.settingsMenuOpen;\n    })\n    .addCase(addPopup, (state, { payload: { content, key, removeAfterMs = 15000 } }) => {\n      state.popupList = (key ? state.popupList.filter((popup) => popup.key !== key) : state.popupList).concat([\n        {\n          key: key || nanoid(),\n          show: true,\n          content,\n          removeAfterMs,\n        },\n      ]);\n    })\n    .addCase(removePopup, (state, { payload: { key } }) => {\n      state.popupList.forEach((p) => {\n        if (p.key === key) {\n          p.show = false;\n        }\n      });\n    }),\n);\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { save, load } from 'redux-localstorage-simple';\nimport transactions from './transactions/reducer';\nimport application from './application/reducer';\n\nconst PERSISTED_KEYS: string[] = ['transactions'];\n\nconst store = configureStore({\n  reducer: {\n    application,\n    transactions,\n  },\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS })],\n  preloadedState: load({ states: PERSISTED_KEYS }),\n});\n\nexport default store;\n\nexport type AppState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","export const white = '#FFF';\nexport const black = '#000';\n\nexport const green = {\n  500: '#00D110',\n};\n\nexport const purple = {\n  200: '#bd7cfe',\n  400: '#ab47bc',\n  700: '#7b1fa2',\n};\n\nexport const red = {\n  100: '#C1C1FF',\n  200: '#7575FF',\n  500: '#9090FF',\n};\n\nexport const grey = {\n  100: '#f5f5f5',\n  200: '#eeeeee',\n  300: '#e0e0e0',\n  400: '#bdbdbd',\n  500: '#9e9e9e',\n  600: '#757575',\n  700: '#616161',\n  800: '#424242',\n  900: '#212121',\n};\n\nexport const bg = '#000000';\n\nexport const teal = {\n  200: '#64ffda',\n};\n","import { black, purple, teal, grey, red, white } from './colors';\n\nconst theme = {\n  borderRadius: 12,\n  color: {\n    black,\n    grey,\n    purple,\n    primary: {\n      light: red[200],\n      main: red[500],\n    },\n    secondary: {\n      main: teal[200],\n    },\n    white,\n    teal,\n  },\n  siteWidth: 1200,\n  spacing: {\n    1: 4,\n    2: 8,\n    3: 16,\n    4: 24,\n    5: 32,\n    6: 48,\n    7: 64,\n  },\n  topBarSize: 72,\n};\n\nexport default theme;\n","//Your theme for the new stuff using material UI has been copied here so it doesn't conflict\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst newTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    text: {\n      primary: '#FFF',\n    },\n    background: {\n      default: '#121212',\n      paper: 'rgba(255, 255, 255, 0.2)',\n    },\n    primary: {\n      light: '#bab7a9',\n      main: 'rgba(128, 125, 111, 0.3)',\n      dark: '#4a4943',\n      contrastText: '#000',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n    action: {\n      disabledBackground: '#CDCDCD',\n      active: '#000',\n      hover: '#000',\n    },\n  },\n  typography: {\n    color: 'white',\n    fontFamily: ['\"IBM Plex Mono\"', 'monospace'].join(','),\n  },\n});\n\nexport default newTheme;\n","import { useCallback, useEffect, useState } from 'react';\n\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document;\n\nfunction isWindowVisible() {\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\n}\n\n/**\n * Returns whether the window is currently visible to the user.\n */\nexport default function useIsWindowVisible(): boolean {\n  const [focused, setFocused] = useState<boolean>(isWindowVisible());\n  const listener = useCallback(() => {\n    setFocused(isWindowVisible());\n  }, [setFocused]);\n\n  useEffect(() => {\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\n\n    document.addEventListener('visibilitychange', listener);\n    return () => {\n      document.removeEventListener('visibilitychange', listener);\n    };\n  }, [listener]);\n\n  return focused;\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useWallet } from 'use-wallet';\nimport useDebounce from '../../hooks/useDebounce';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport { updateBlockNumber } from './actions';\nimport { getDefaultProvider } from '../../utils/provider';\n\nexport default function Updater(): null {\n  const { ethereum, chainId } = useWallet();\n\n  const dispatch = useDispatch();\n\n  const windowVisible = useIsWindowVisible();\n\n  const [state, setState] = useState<{\n    chainId: number | undefined;\n    blockNumber: number | null;\n  }>({\n    chainId,\n    blockNumber: null,\n  });\n\n  const blockNumberCallback = useCallback(\n    (blockNumber: number) => {\n      setState((state) => {\n        if (chainId === state.chainId) {\n          if (typeof state.blockNumber !== 'number') return { chainId, blockNumber };\n          return { chainId, blockNumber: Math.max(blockNumber, state.blockNumber) };\n        }\n        return state;\n      });\n    },\n    [chainId, setState],\n  );\n\n  // attach/detach listeners\n  // @ts-ignore\n  useEffect(() => {\n    if (!ethereum || !chainId || !windowVisible) return undefined;\n    setState({ chainId, blockNumber: null });\n\n    const provider = getDefaultProvider();\n    provider\n      .getBlockNumber()\n      .then(blockNumberCallback)\n      .catch((error) => console.error(`Failed to get block number for chainId: ${chainId}`, error));\n\n    provider.on('block', blockNumberCallback);\n    return () => provider.removeListener('block', blockNumberCallback);\n  }, [dispatch, chainId, ethereum, blockNumberCallback, windowVisible]);\n\n  const debouncedState = useDebounce(state, 100);\n\n  useEffect(() => {\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\n    dispatch(\n      updateBlockNumber({\n        chainId: debouncedState.chainId,\n        blockNumber: debouncedState.blockNumber,\n      }),\n    );\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\n\n  return null;\n}\n","import { useEffect, useState } from 'react';\n\n// modified from https://usehooks.com/useDebounce/\nexport default function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useWallet } from 'use-wallet';\nimport { useAddPopup, useBlockNumber } from '../application/hooks';\nimport { AppDispatch, AppState } from '../index';\nimport { checkedTransaction, finalizeTransaction } from './actions';\nimport { getDefaultProvider } from '../../utils/provider';\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: { addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number },\n): boolean {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\n\nexport default function Updater(): null {\n  const { chainId, ethereum } = useWallet();\n\n  const lastBlockNumber = useBlockNumber();\n\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  const transactions = chainId ? state[chainId] ?? {} : {};\n\n  // show popup on confirm\n  const addPopup = useAddPopup();\n\n  useEffect(() => {\n    if (!chainId || !ethereum || !lastBlockNumber) {\n      return;\n    }\n\n    const provider = getDefaultProvider();\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\n      .forEach((hash) => {\n        provider\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                }),\n              );\n\n              addPopup(\n                {\n                  txn: {\n                    hash,\n                    success: receipt.status === 1,\n                    summary: transactions[hash]?.summary,\n                  },\n                },\n                hash,\n              );\n            } else {\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }));\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error);\n          });\n      });\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\n\n  return null;\n}\n","import React from 'react';\nimport ApplicationUpdater from './application/updater';\nimport TransactionUpdater from './transactions/updater';\n\nconst Updaters = () => (\n  <>\n    <ApplicationUpdater />\n    <TransactionUpdater />\n  </>\n);\n\nexport default Updaters;\n","import Loader from './Loader';\n\nexport default Loader;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nconst Loader = () => {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n      }}\n    >\n      <Typography>Loading</Typography>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { useContext } from 'react';\nimport { AlertCircle, CheckCircle } from 'react-feather';\nimport styled, { ThemeContext } from 'styled-components';\nimport { useWallet } from 'use-wallet';\nimport config from '../../config';\n\nconst RowNoFlex = styled.div`\n  flex-wrap: nowrap;\n`;\n\nexport default function TransactionPopup({\n  hash,\n  success,\n  summary,\n}: {\n  hash: string;\n  success?: boolean;\n  summary?: string;\n}) {\n  const { chainId } = useWallet();\n  const theme = useContext(ThemeContext);\n\n  return (\n    <RowNoFlex>\n      <div style={{ paddingRight: 16 }}>\n        {success ? <CheckCircle color={theme.color.teal[200]} size={24} /> : <AlertCircle color=\"#FF6871\" size={24} />}\n      </div>\n      <div>\n        <StyledPopupDesc>{summary ?? 'Hash: ' + hash.slice(0, 8) + '...' + hash.slice(58, 65)}</StyledPopupDesc>\n        {chainId && (\n          <StyledLink target=\"_blank\" href={`${config.ftmscanUrl}/tx/${hash}`}>\n             View on Ftmscan\n          </StyledLink>\n        )}\n      </div>\n    </RowNoFlex>\n  );\n}\n\nconst StyledPopupDesc = styled.span`\n  font-weight: 500;\n  color: ${(props) => props.theme.color.grey[300]};\n`;\n\nconst StyledLink = styled.a`\n  color: ${(props) => props.theme.color.grey[500]};\n`;\n","import React, { useCallback } from 'react';\nimport { AlertCircle } from 'react-feather';\nimport styled from 'styled-components';\n\nconst RowNoFlex = styled.div`\n  flex-wrap: nowrap;\n`;\n\nexport default function ErrorPopup({ message, stack }: { message: string; stack: string }) {\n  const copyErrorDetails = useCallback(async () => {\n    await navigator.clipboard.writeText(`${message}\\n${stack}`);\n  }, [message, stack]);\n\n  return (\n    <RowNoFlex>\n      <div style={{ paddingRight: 16 }}>\n        <AlertCircle color=\"#FF6871\" size={24} />\n      </div>\n      <div>\n        <StyledPopupDesc>{message}</StyledPopupDesc>\n        <StyledLink onClick={copyErrorDetails} href=\"#\">\n          Copy error details\n        </StyledLink>\n      </div>\n    </RowNoFlex>\n  );\n}\n\nconst StyledPopupDesc = styled.span`\n  font-weight: 500;\n  color: ${(props) => props.theme.color.grey[300]};\n`;\n\nconst StyledLink = styled.a`\n  color: ${(props) => props.theme.color.grey[500]};\n`;\n","import React, { useCallback, useContext, useEffect } from 'react';\nimport { X } from 'react-feather';\nimport { useSpring } from 'react-spring/web';\nimport styled, { ThemeContext } from 'styled-components';\nimport { animated } from 'react-spring';\nimport { PopupContent } from '../../state/application/actions';\nimport { useRemovePopup } from '../../state/application/hooks';\nimport TransactionPopup from './TransactionPopup';\nimport ErrorPopup from './ErrorPopup';\n\nexport const StyledClose = styled(X)`\n  position: absolute;\n  right: 10px;\n  top: 10px;\n\n  :hover {\n    cursor: pointer;\n  }\n`;\nexport const Popup = styled.div`\n  display: inline-block;\n  width: 100%;\n  padding: 1em;\n  background-color: ${({ theme }) => theme.color.grey[700]};\n  position: relative;\n  border-radius: 10px;\n  padding: 20px;\n  padding-right: 35px;\n  overflow: hidden;\n\n  @media (max-width: 768px) {\n    min-width: 290px;\n  }\n`;\nconst Fader = styled.div`\n  position: absolute;\n  bottom: 0px;\n  left: 0px;\n  width: 100%;\n  height: 2px;\n  background-color: ${({ theme }) => theme.color.grey[400]};\n`;\n\nconst AnimatedFader = animated(Fader);\n\nexport default function PopupItem({\n  removeAfterMs,\n  content,\n  popKey,\n}: {\n  removeAfterMs: number | null;\n  content: PopupContent;\n  popKey: string;\n}) {\n  const removePopup = useRemovePopup();\n  const removeThisPopup = useCallback(() => removePopup(popKey), [popKey, removePopup]);\n  useEffect(() => {\n    if (removeAfterMs === null) return undefined;\n\n    const timeout = setTimeout(() => {\n      removeThisPopup();\n    }, removeAfterMs);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [removeAfterMs, removeThisPopup]);\n\n  const theme = useContext(ThemeContext);\n\n  let popupContent;\n  if ('txn' in content) {\n    const {\n      txn: { hash, success, summary },\n    } = content;\n    popupContent = <TransactionPopup hash={hash} success={success} summary={summary} />;\n  }\n  if ('error' in content) {\n    const {\n      error: { message, stack },\n    } = content;\n    popupContent = <ErrorPopup message={message} stack={stack} />;\n  }\n\n  const faderStyle = useSpring({\n    from: { width: '100%' },\n    to: { width: '0%' },\n    config: { duration: removeAfterMs ?? undefined },\n  });\n\n  return (\n    <Popup>\n      <StyledClose color={theme.text2} onClick={removeThisPopup} />\n      {popupContent}\n      {removeAfterMs !== null ? <AnimatedFader style={faderStyle} /> : null}\n    </Popup>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useActivePopups } from '../../state/application/hooks';\nimport PopupItem from './PopupItem';\n\nconst MobilePopupWrapper = styled.div<{ height: string | number }>`\n  position: relative;\n  max-width: 100%;\n  height: ${({ height }) => height};\n  margin: ${({ height }) => (height ? '0 auto;' : 0)};\n  margin-bottom: ${({ height }) => (height ? '20px' : 0)}};\n\n  display: none;\n  @media (max-width: 768px) {\n    display: block;\n  };\n`;\n\nconst MobilePopupInner = styled.div`\n  height: 99%;\n  overflow-x: auto;\n  overflow-y: hidden;\n  display: flex;\n  flex-direction: row;\n  -webkit-overflow-scrolling: touch;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nconst FixedPopupColumn = styled.div`\n  position: fixed;\n  top: 64px;\n  margin-right: 24px;\n  right: 3rem;\n  max-width: 355px !important;\n  width: 100%;\n  z-index: 2;\n\n  @media (max-width: 768px) {\n    display: none;\n  } ;\n`;\n\nexport default function Popups() {\n  // get all popups\n  const activePopups = useActivePopups();\n\n  return (\n    <>\n      <FixedPopupColumn>\n        {activePopups.map((item) => (\n          <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\n        ))}\n      </FixedPopupColumn>\n      <MobilePopupWrapper height={activePopups?.length > 0 ? 'fit-content' : 0}>\n        <MobilePopupInner>\n          {activePopups // reverse so new items up front\n            .slice(0)\n            .reverse()\n            .map((item) => (\n              <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\n            ))}\n        </MobilePopupInner>\n      </MobilePopupWrapper>\n    </>\n  );\n}\n","import React, { Suspense, lazy } from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { ThemeProvider as TP } from '@material-ui/core/styles';\nimport { ThemeProvider as TP1 } from 'styled-components';\nimport { UseWalletProvider } from 'use-wallet';\nimport usePromptNetwork from './hooks/useNetworkPrompt';\nimport BanksProvider from './contexts/Banks';\nimport TombFinanceProvider from './contexts/TombFinanceProvider';\nimport ModalsProvider from './contexts/Modals';\nimport store from './state';\nimport theme from './theme';\nimport newTheme from './newTheme';\nimport config from './config';\nimport Updaters from './state/Updaters';\nimport Loader from './components/Loader';\nimport Popups from './components/Popups';\n\nimport { RefreshContextProvider } from './contexts/RefreshContext';\n\n\nconst Home = lazy(() => import('./views/Home'));\nconst Cemetery = lazy(() => import('./views/Cemetery'));\nconst Masonry = lazy(() => import('./views/Masonry'));\nconst Pit = lazy(() => import('./views/Pit'));\nconst Dividends = lazy(() => import('./views/Dividends'));\n\n\nconst NoMatch = () => (\n  <h3 style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\n    URL Not Found. <a href=\"/\">Go back home.</a>\n  </h3>\n);\n\nconst App: React.FC = () => {\n  // Clear localStorage for mobile users\n  if (typeof localStorage.version_app === 'undefined' || localStorage.version_app !== '1.1') {\n    localStorage.clear();\n    localStorage.setItem('connectorId', '');\n    localStorage.setItem('version_app', '1.1');\n  }\n\n  usePromptNetwork();\n\n  return (\n    <Providers>\n      <Router>\n        <Suspense fallback={<Loader />}>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/farms\">\n              <Cemetery />\n            </Route>\n            <Route path=\"/boardroom\">\n              <Masonry />\n            </Route>\n            <Route path=\"/bonds\">\n              <Pit />\n            </Route>\n            <Route path=\"/dividends\">\n              <Dividends />\n            </Route>\n            {/* <Route path=\"/sbs\">\n              <SBS />\n            </Route>\n            <Route path=\"/regulations\">\n              <Regulations />\n            </Route>\n            <Route path=\"/liquidity\">\n              <Liquidity />\n            </Route> */}\n            <Route path=\"*\">\n              <NoMatch />\n            </Route>\n          </Switch>\n        </Suspense>\n      </Router>\n    </Providers>\n  );\n};\n\nconst Providers: React.FC = ({ children }) => {\n  return (\n    <TP1 theme={theme}>\n    <TP theme={newTheme}>\n      <UseWalletProvider\n        chainId={config.chainId}\n        connectors={{\n          walletconnect: { rpcUrl: config.defaultProvider },\n          walletlink: {\n            url: config.defaultProvider,\n            appName: 'Moon Finance',\n            appLogoUrl: 'https://github.com/tombfinance/tombfinance-assets/blob/master/logo_tomb_NoBG.png',\n          },\n       \n        }}\n      >\n        <Provider store={store}>\n          <Updaters />\n          <RefreshContextProvider>\n            <TombFinanceProvider>\n              <ModalsProvider>\n                <BanksProvider>\n                  <>\n                    <Popups />\n                    {children}\n                  </>\n                </BanksProvider>\n              </ModalsProvider>\n            </TombFinanceProvider>\n          </RefreshContextProvider>\n        </Provider>\n      </UseWalletProvider>\n    </TP>\n  </TP1>\n);\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const TOMB_TICKER = '2OMB';\nexport const TSHARE_TICKER = '2SHARES';\nexport const TBOND_TICKER = '2BOND';\nexport const FTM_TICKER = 'FTM';\nexport const WFTM_TICKER = 'WFTM';\nexport const SPOOKY_ROUTER_ADDR = '0xF491e7B69E4244ad4002BC14e878a34207E38c29';\nexport const ZAPPER_ROUTER_ADDR = '0x8bb1fe7a50082623b372d857b4d07911c786a3e9';\nexport const TAX_OFFICE_ADDR = '0xcaf6C0FB8Bcb737C2D5D7e5Db615147a26091De1';\n","import { createAction } from '@reduxjs/toolkit';\n// import { ChainId } from '@uniswap/sdk';\nimport { ChainId } from '@spookyswap/sdk';\n\nexport interface SerializableTransactionReceipt {\n  to: string;\n  from: string;\n  contractAddress: string;\n  transactionIndex: number;\n  blockHash: string;\n  transactionHash: string;\n  blockNumber: number;\n  status?: number;\n}\n\nexport const addTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  from: string;\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n}>('transactions/addTransaction');\n\nexport const clearAllTransactions = createAction<{ chainId: ChainId }>('transactions/clearAllTransactions');\n\nexport const finalizeTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  receipt: SerializableTransactionReceipt;\n}>('transactions/finalizeTransaction');\n\nexport const checkedTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  blockNumber: number;\n}>('transactions/checkedTransaction');\n"],"sourceRoot":""}