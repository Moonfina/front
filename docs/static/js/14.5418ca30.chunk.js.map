{"version":3,"sources":["hooks/useBurned2SHARES.js","hooks/useTotalValueLocked.ts","views/Home/Home.js","hooks/useHandleTransactionReceipt.ts","components/CardIcon/CardIcon.tsx","hooks/useTombStats.ts","hooks/useLpStats.ts","hooks/useZap.ts","hooks/useBondStats.ts","hooks/usetShareStats.ts","hooks/useApproveZapper.ts","views/Bank/components/ZapModal.tsx"],"names":["web3","Web3","ERC20ABI","useBurned2SHARES","useState","balance","setBalance","useEffect","getBalance","interval","setInterval","clearInterval","a","token3shares","eth","Contract","Number","utils","methods","balanceOf","call","fromWei","useTotalValueLocked","totalValueLocked","setTotalValueLocked","slowRefresh","useRefresh","tombFinance","useTombFinance","getTotalValueLocked","console","error","fetchTVL","BackgroundImage","createGlobalStyle","HomeImage","useStyles","makeStyles","theme","button","breakpoints","down","marginTop","Home","classes","TVL","tombFtmLpStats","useLpStats","tShareFtmLpStats","tombStats","useTombStats","tShareStats","usetShareStats","tBondStats","useBondStats","tombTesting","tShareTesting","address","tombLPStats","useMemo","tshareLPStats","tombPriceInDollars","priceInDollars","toFixed","tombPriceInFTM","tokenInFtm","tombCirculatingSupply","String","circulatingSupply","tombTotalSupply","totalSupply","tSharePriceInDollars","tSharePriceInFTM","tShareCirculatingSupply","tShareTotalSupply","tBondPriceInDollars","tBondPriceInFTM","tombLpZap","useZap","depositTokenName","tshareLpZap","StyledLink","styled","useModal","ZapModal","decimals","onConfirm","zappingToken","tokenName","amount","isNaN","onZap","onDissmissTombZap","onPresentTombZap","onDissmissTshareZap","onPresentTshareZap","Page","Grid","container","spacing","item","xs","sm","justify","color","style","width","height","objectFit","paddingTop","src","CashImage","Paper","Box","p","href","mt","Alert","variant","severity","Card","CardContent","align","fontSize","end","separator","prefix","Button","marginRight","target","className","position","CardIcon","TokenSymbol","symbol","alignContent","disabled","onClick","tokenAmount","ftmAmount","priceOfOne","totalLiquidity","useHandleTransactionReceipt","addTransaction","useTransactionAdder","addPopup","useAddPopup","useCallback","promise","summary","then","tx","catch","err","message","includes","toLowerCase","slice","stack","StyledCardIcon","div","props","children","stat","setStat","fastRefresh","getTombStat","fetchTombPrice","lpTicker","getLPStat","fetchLpPrice","bank","handleTransactionReceipt","zapIn","getBondStat","fetchBondPrice","useShareStats","getShareStat","fetchSharePrice","ApprovalState","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","BigNumber","from","useApproveZapper","token","FTM_TICKER","FTM","TOMB_TICKER","TOMB","TSHARE_TICKER","TSHARE","pendingApproval","useHasPendingApproval","ZAPPER_ROUTER_ADDR","currentAllowance","useAllowance","approvalState","APPROVED","lt","PENDING","NOT_APPROVED","UNKNOWN","approve","response","approval","tokenAddress","spender","StyledActionSpacer","StyledDescriptionText","grey","StyledMenuItem","withStyles","root","backgroundColor","selected","MenuItem","onDismiss","useWallet","ftmBalance","toString","tombBalance","useTokenBalance","tshareBalance","val","setVal","setZappingToken","zappingTokenBalance","setZappingTokenBalance","token0","token1","estimate","setEstimate","approveZapperStatus","approveZapper","ftmAmountPerLP","startsWith","handleChange","e","currentTarget","value","n","parseFloat","isFinite","estimateZapIn","estimateZap","handleSelectMax","Modal","ModalTitle","text","InputLabel","id","Select","onChange","event","getDisplayBalance","labelId","TokenInput","onSelectMax","max","Label","ModalActions"],"mappings":"0aAIMA,G,aAAO,IAAIC,IAAK,mCAEhBC,EAAW,CAAC,CAAE,UAAY,EAAM,OAAU,GAAI,KAAQ,OAAQ,QAAW,CAAE,CAAE,KAAQ,GAAI,KAAQ,WAAc,SAAW,EAAO,gBAAmB,OAAQ,KAAQ,YAAc,CAAE,UAAY,EAAO,OAAU,CAAE,CAAE,KAAQ,WAAY,KAAQ,WAAa,CAAE,KAAQ,SAAU,KAAQ,YAAe,KAAQ,UAAW,QAAW,CAAE,CAAE,KAAQ,GAAI,KAAQ,SAAY,SAAW,EAAO,gBAAmB,aAAc,KAAQ,YAAc,CAAE,UAAY,EAAM,OAAU,GAAI,KAAQ,cAAe,QAAW,CAAE,CAAE,KAAQ,GAAI,KAAQ,YAAe,SAAW,EAAO,gBAAmB,OAAQ,KAAQ,YAAc,CAAE,UAAY,EAAO,OAAU,CAAE,CAAE,KAAQ,QAAS,KAAQ,WAAa,CAAE,KAAQ,MAAO,KAAQ,WAAa,CAAE,KAAQ,SAAU,KAAQ,YAAe,KAAQ,eAAgB,QAAW,CAAE,CAAE,KAAQ,GAAI,KAAQ,SAAY,SAAW,EAAO,gBAAmB,aAAc,KAAQ,YAAc,CAAE,UAAY,EAAM,OAAU,GAAI,KAAQ,WAAY,QAAW,CAAE,CAAE,KAAQ,GAAI,KAAQ,UAAa,SAAW,EAAO,gBAAmB,OAAQ,KAAQ,YAAc,CAAE,UAAY,EAAM,OAAU,CAAE,CAAE,KAAQ,SAAU,KAAQ,YAAe,KAAQ,YAAa,QAAW,CAAE,CAAE,KAAQ,UAAW,KAAQ,YAAe,SAAW,EAAO,gBAAmB,OAAQ,KAAQ,YAAc,CAAE,UAAY,EAAM,OAAU,GAAI,KAAQ,SAAU,QAAW,CAAE,CAAE,KAAQ,GAAI,KAAQ,WAAc,SAAW,EAAO,gBAAmB,OAAQ,KAAQ,YAAc,CAAE,UAAY,EAAO,OAAU,CAAE,CAAE,KAAQ,MAAO,KAAQ,WAAa,CAAE,KAAQ,SAAU,KAAQ,YAAe,KAAQ,WAAY,QAAW,CAAE,CAAE,KAAQ,GAAI,KAAQ,SAAY,SAAW,EAAO,gBAAmB,aAAc,KAAQ,YAAc,CAAE,UAAY,EAAM,OAAU,CAAE,CAAE,KAAQ,SAAU,KAAQ,WAAa,CAAE,KAAQ,WAAY,KAAQ,YAAe,KAAQ,YAAa,QAAW,CAAE,CAAE,KAAQ,GAAI,KAAQ,YAAe,SAAW,EAAO,gBAAmB,OAAQ,KAAQ,YAAc,CAAE,SAAW,EAAM,gBAAmB,UAAW,KAAQ,YAAc,CAAE,WAAa,EAAO,OAAU,CAAE,CAAE,SAAW,EAAM,KAAQ,QAAS,KAAQ,WAAa,CAAE,SAAW,EAAM,KAAQ,UAAW,KAAQ,WAAa,CAAE,SAAW,EAAO,KAAQ,QAAS,KAAQ,YAAe,KAAQ,WAAY,KAAQ,SAAW,CAAE,WAAa,EAAO,OAAU,CAAE,CAAE,SAAW,EAAM,KAAQ,OAAQ,KAAQ,WAAa,CAAE,SAAW,EAAM,KAAQ,KAAM,KAAQ,WAAa,CAAE,SAAW,EAAO,KAAQ,QAAS,KAAQ,YAAe,KAAQ,WAAY,KAAQ,UAqDt9EC,I,IAAAA,EAvBf,WACI,MAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAYA,OAVAC,qBAAU,WACNC,IACA,IAAMC,EAAWC,aAAY,WACzBF,MACD,KACH,OAAO,WACHG,cAAcF,MAEnB,IAEI,CAAEJ,WAbe,SAeTG,IAfS,2EAexB,8BAAAI,EAAA,6DACUC,EAAe,IAAIb,EAAKc,IAAIC,SAASb,EAAU,8CADzD,KAEoBc,OAFpB,KAE2BhB,EAAKiB,MAFhC,SAEoDJ,EAAaK,QAAQC,UA9CrD,8CA8CgFC,OAFpG,6BAEsCC,QAFtC,gBAEUhB,GAFV,cAIIC,EAAWD,GAJf,4CAfwB,wB,kBCZbiB,EApBa,WAC1B,MAAgDlB,mBAAiB,GAAjE,mBAAOmB,EAAP,KAAyBC,EAAzB,KACQC,EAAgBC,cAAhBD,YACFE,EAAcC,cAcpB,OAZArB,qBAAU,WAAM,4CACd,sBAAAK,EAAA,2EAEIY,EAFJ,SAE8BG,EAAYE,sBAF1C,kFAKIC,QAAQC,MAAR,MALJ,0DADc,uBAAC,WAAD,wBASdC,KACC,CAACR,EAAqBG,EAAaF,IAE/BF,G,yGCSHU,EAAkBC,YAAH,kIAECC,KAKhBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAO,eACJD,EAAME,YAAYC,KAAK,OAAS,CAC/BC,UAAW,aAkWFC,EA7VF,WACX,IAAMC,EAAUR,IACVS,EAAMvB,IACNwB,EAAiBC,YAAW,eAC5BC,EAAmBD,YAAW,kBAC9BE,EAAYC,cACZC,EAAcC,cACdC,EAAaC,cAEXjD,GADYuB,cACAzB,IAAZE,SAKCkD,OACEC,SAOyEC,QADpF,IAGMC,EAAcC,mBAAQ,kBAAOb,GAAkC,OAAO,CAACA,IACvEc,EAAgBD,mBAAQ,kBAAOX,GAAsC,OAAO,CAACA,IAC7Ea,EAAqBF,mBACzB,kBAAOV,EAAYjC,OAAOiC,EAAUa,gBAAgBC,QAAQ,GAAK,OACjE,CAACd,IAEGe,EAAiBL,mBAAQ,kBAAOV,EAAYjC,OAAOiC,EAAUgB,YAAYF,QAAQ,GAAK,OAAO,CAACd,IAC9FiB,EAAwBP,mBAAQ,kBAAOV,EAAYkB,OAAOlB,EAAUmB,mBAAqB,OAAO,CAACnB,IACjGoB,EAAkBV,mBAAQ,kBAAOV,EAAYkB,OAAOlB,EAAUqB,aAAe,OAAO,CAACrB,IAErFsB,EAAuBZ,mBAC3B,kBAAOR,EAAcnC,OAAOmC,EAAYW,gBAAgBC,QAAQ,GAAK,OACrE,CAACZ,IAEGqB,EAAmBb,mBACvB,kBAAOR,EAAcnC,OAAOmC,EAAYc,YAAYF,QAAQ,GAAK,OACjE,CAACZ,IAEGsB,EAA0Bd,mBAC9B,kBAAOR,EAAcgB,OAAOhB,EAAYiB,mBAAqB,OAC7D,CAACjB,IAEGuB,EAAoBf,mBAAQ,kBAAOR,EAAcgB,OAAOhB,EAAYmB,aAAe,OAAO,CAACnB,IAE3FwB,EAAsBhB,mBAC1B,kBAAON,EAAarC,OAAOqC,EAAWS,gBAAgBC,QAAQ,GAAK,OACnE,CAACV,IAEGuB,EAAkBjB,mBAAQ,kBAAON,EAAarC,OAAOqC,EAAWY,YAAYF,QAAQ,GAAK,OAAO,CAACV,IAOjGwB,GANyBlB,mBAC7B,kBAAON,EAAac,OAAOd,EAAWe,mBAAqB,OAC3D,CAACf,IAEsBM,mBAAQ,kBAAON,EAAac,OAAOd,EAAWiB,aAAe,OAAO,CAACjB,IAE5EyB,YAAO,CAAEC,iBAAkB,iBACvCC,EAAcF,YAAO,CAAEC,iBAAkB,mBAEzCE,GAAaC,IAAOtE,EAAV,qFAMhB,GAA8CuE,YAC5C,kBAACC,EAAA,EAAD,CACEC,SAAU,GACVC,UAAW,SAACC,EAAcC,EAAWC,GAC/BzE,OAAOyE,IAAW,GAAKC,MAAM1E,OAAOyE,MACxCZ,EAAUc,MAAMJ,EAAcC,EAAWC,GACzCG,OAEFJ,UAAW,iBARf,qBAAOK,GAAP,MAAyBD,GAAzB,MAYA,GAAkDT,YAChD,kBAACC,EAAA,EAAD,CACEC,SAAU,GACVC,UAAW,SAACC,EAAcC,EAAWC,GAC/BzE,OAAOyE,IAAW,GAAKC,MAAM1E,OAAOyE,MACxCT,EAAYW,MAAMJ,EAAcC,EAAWC,GAC3CK,OAEFN,UAAW,oBARf,qBAAOO,GAAP,MAA2BD,GAA3B,MAYA,OACE,kBAACE,EAAA,EAAD,KACE,kBAAC/D,EAAD,MACA,kBAACgE,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAEvB,kBAACF,EAAA,EAAD,CAAMC,WAAS,EAACE,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,QAAQ,UAE1C,kBAAC,IAAD,CAAOC,MAAM,OAAOC,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAASC,UAAW,UAAWC,WAAY,SAAWC,IAAKC,OAGlH,kBAACd,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,EAAG,GACN,wDACA,4EACA,2BACA,kBAACjC,GAAD,CAAYkC,KAAK,UAAjB,SADA,gEAGA,uFAA4D,kBAAClC,GAAD,CAAYkC,KAAK,cAAjB,aAA5D,0BAQN,kBAAClB,EAAA,EAAD,CAAMC,WAAS,EAACK,QAAQ,UACpB,kBAACU,EAAA,EAAD,CAAKG,GAAI,EAAGX,MAAO,CAAEC,MAAO,WAC5B,kBAACW,EAAA,EAAD,CAAOC,QAAQ,SAASC,SAAS,WAAjC,6QAOJ,kBAACtB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,MAAM,UACjB,kDACA,kBAAC,IAAD,CAASjB,MAAO,CAAEkB,SAAU,QAAUC,IAAK/E,EAAKgF,UAAU,IAAIC,OAAO,SAM3E,kBAAC7B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACkB,EAAA,EAAD,CAAMf,MAAO,CAAEE,OAAQ,SACrB,kBAACc,EAAA,EAAD,CAAaC,MAAM,SAASjB,MAAO,CAAE/D,UAAW,SAQ9C,kBAACqF,EAAA,EAAD,CAAQvB,MAAM,UAAUW,KAAK,SAASG,QAAQ,YAAYb,MAAO,CAAEuB,YAAa,SAAhF,SAGA,kBAACD,EAAA,EAAD,CACEvB,MAAM,UACNyB,OAAO,SACPd,KApIS,4FAqITG,QAAQ,YACRb,MAAO,CAAEuB,YAAa,QACtBE,UAAWtF,EAAQL,QANrB,YAaA,kBAACwF,EAAA,EAAD,CAAQvB,MAAM,UAAUyB,OAAO,SAASd,KAAK,4FAA4FG,QAAQ,YAAYb,MAAO,CAAEuB,YAAa,SAAnL,eAGA,kBAACD,EAAA,EAAD,CAAQvB,MAAM,UAAUyB,OAAO,SAASd,KAAK,4EAA4EG,QAAQ,YAAYb,MAAO,CAAEuB,YAAa,SAAnK,cAGA,kBAACD,EAAA,EAAD,CAAQvB,MAAM,UAAUyB,OAAO,SAASd,KAAK,4EAA4EG,QAAQ,YAAYb,MAAO,CAAEuB,YAAa,SAAnK,oBAQN,kBAAC/B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,MAAM,SAASjB,MAAO,CAAE0B,SAAU,aAC7C,oCACA,kBAAClB,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACgB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,OAAO,WAJ1B,gBAQE,kBAACrB,EAAA,EAAD,KACE,0BAAMR,MAAO,CAAEkB,SAAU,SAAW3D,GAAkC,SAAtE,SAEF,kBAACiD,EAAA,EAAD,KACE,0BAAMR,MAAO,CAAEkB,SAAU,OAAQY,aAAc,eAA/C,IACI1E,GAA0C,SAGhD,0BAAM4C,MAAO,CAAEkB,SAAU,SAAzB,iBACiBzD,EAAwBL,GAAoBE,QAAQ,GADrE,IACyE,6BADzE,uBAEuBG,EAFvB,IAE8C,6BAF9C,iBAGiBG,EAAgB,SAkCvC,kBAAC4B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,MAAM,SAASjB,MAAO,CAAE0B,SAAU,aAC7C,uCACA,kBAAClB,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACgB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,OAAO,aAJ1B,gBAQE,kBAACrB,EAAA,EAAD,KACE,0BAAMR,MAAO,CAAEkB,SAAU,SAAWnD,GAAsC,SAA1E,SAEF,kBAACyC,EAAA,EAAD,KACE,0BAAMR,MAAO,CAAEkB,SAAU,SAAzB,IAAqCpD,GAA8C,SAErF,0BAAMkC,MAAO,CAAEkB,SAAU,SAAzB,iBACiBlD,EAA0BF,GAAsBR,QAAQ,GADzE,IAC6E,6BAD7E,uBAEuBU,EAAwBpE,EAF/C,IAEwD,6BAFxD,iBAGiBqE,EAAkBrE,MAOzC,kBAAC4F,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,MAAM,SAASjB,MAAO,CAAE0B,SAAU,aAC7C,qCACA,kBAAClB,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACgB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,OAAO,YAJ1B,gBAQE,kBAACrB,EAAA,EAAD,KACE,0BAAMR,MAAO,CAAEkB,SAAU,SAAW/C,GAAoC,SAAxE,SAEF,kBAACqC,EAAA,EAAD,KACE,0BAAMR,MAAO,CAAEkB,SAAU,SAAzB,IAAqChD,GAA4C,SAEnF,0BAAM8B,MAAO,CAAEkB,SAAU,SAAzB,qBACoB,6BADpB,8BAE6B,6BAF7B,2BAaN,kBAAC1B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,MAAM,UACjB,mDACA,kBAACT,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACgB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,OAAO,kBAGxB,kBAACrB,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACW,EAAA,EAAD,CAAQvB,MAAM,UAAUgC,UAAU,EAAOC,QAAS5C,GAAkByB,QAAQ,aAA5E,YAIF,kBAACL,EAAA,EAAD,CAAKG,GAAI,GACP,0BAAMX,MAAO,CAAEkB,SAAU,UACX,OAAXjE,QAAW,IAAXA,OAAA,EAAAA,EAAagF,aAAb,OAA2BhF,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAagF,YAAc,OADzD,UACwE,KAC1D,OAAXhF,QAAW,IAAXA,OAAA,EAAAA,EAAaiF,WAAb,OAAyBjF,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAaiF,UAAY,OAFrD,SAKF,kBAAC1B,EAAA,EAAD,UAAkB,OAAXvD,QAAW,IAAXA,OAAA,EAAAA,EAAakF,YAAalF,EAAYkF,WAAa,QAC1D,0BAAMnC,MAAO,CAAEkB,SAAU,SAAzB,gBAC0B,OAAXjE,QAAW,IAAXA,OAAA,EAAAA,EAAamF,gBAAiBnF,EAAYmF,eAAiB,OAD1E,IACkF,6BADlF,kBAE4B,OAAXnF,QAAW,IAAXA,OAAA,EAAAA,EAAaY,aAAcZ,EAAYY,YAAc,WAK5E,kBAAC2B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,MAAM,UACjB,sDACA,kBAACT,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACgB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,OAAO,oBAGxB,kBAACrB,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACW,EAAA,EAAD,CAAQvB,MAAM,UAAUiC,QAAS1C,GAAoBuB,QAAQ,aAA7D,YAIF,kBAACL,EAAA,EAAD,CAAKG,GAAI,GACP,0BAAMX,MAAO,CAAEkB,SAAU,UACT,OAAb/D,QAAa,IAAbA,OAAA,EAAAA,EAAe8E,aAAf,OAA6B9E,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAe8E,YAAc,OAD7D,aAC+E,KAC/D,OAAb9E,QAAa,IAAbA,OAAA,EAAAA,EAAe+E,WAAf,OAA2B/E,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAe+E,UAAY,OAFzD,SAKF,kBAAC1B,EAAA,EAAD,UAAoB,OAAbrD,QAAa,IAAbA,OAAA,EAAAA,EAAegF,YAAahF,EAAcgF,WAAa,QAC9D,0BAAMnC,MAAO,CAAEkB,SAAU,SAAzB,gBAC4B,OAAb/D,QAAa,IAAbA,OAAA,EAAAA,EAAeiF,gBAAiBjF,EAAciF,eAAiB,OAC5E,6BAFF,kBAG8B,OAAbjF,QAAa,IAAbA,OAAA,EAAAA,EAAeU,aAAcV,EAAcU,YAAc,e,iCChYxF,6BA2BewE,IAtBf,WACE,IAAMC,EAAiBC,cACjBC,EAAWC,cAEjB,OAAOC,uBACL,SAACC,EAAuCC,GACtCD,EACGE,MAAK,SAACC,GAAD,OAAQR,EAAeQ,EAAI,CAAEF,eAClCG,OAAM,SAACC,GACN,IAAIA,EAAIC,QAAQC,SAAS,eAAzB,CAIA,IAAMD,EAAO,oBAAgBL,EAAQ,GAAGO,eAA3B,OAA2CP,EAAQQ,MAAM,IACtE/H,QAAQC,MAAR,UAAiB2H,EAAjB,aAA6BD,EAAIC,SAAWD,EAAIK,QAChDb,EAAS,CAAElH,MAAO,CAAE2H,UAASI,MAAOL,EAAIC,SAAWD,EAAIK,eAG7D,CAACb,EAAUF,M,iGCdTgB,E,MAAiB7E,EAAO8E,IAAV,+OAUH,SAACC,GAAD,OAAWA,EAAM3H,MAAM6D,QAAQ,MAGjCiC,EAf2B,SAAC,GAAD,IAAG8B,EAAH,EAAGA,SAAH,OAAkB,kBAACH,EAAD,KAAiBG,K,8FCkB9DhH,IApBM,WACnB,MAAwB9C,qBAAxB,mBAAO+J,EAAP,KAAaC,EAAb,KACQC,EAAgB3I,cAAhB2I,YACF1I,EAAcC,cAcpB,OAZArB,qBAAU,WAAM,4CACd,sBAAAK,EAAA,2EAEIwJ,EAFJ,SAEkBzI,EAAY2I,cAF9B,kFAKIxI,QAAQC,MAAR,MALJ,0DADc,uBAAC,WAAD,wBASdwI,KACC,CAACH,EAASzI,EAAa0I,IAEnBF,I,8FCGMpH,IApBI,SAACyH,GAClB,MAAwBpK,qBAAxB,mBAAO+J,EAAP,KAAaC,EAAb,KACQ3I,EAAgBC,cAAhBD,YACFE,EAAcC,cAcpB,OAZArB,qBAAU,WAAM,4CACd,sBAAAK,EAAA,2EAEIwJ,EAFJ,SAEkBzI,EAAY8I,UAAUD,GAFxC,kFAKI1I,QAAQC,MAAR,MALJ,0DADc,uBAAC,WAAD,wBASd2I,KACC,CAACN,EAASzI,EAAaF,EAAa+I,IAEhCL,I,iCCtBT,6BAqBerF,IAhBA,SAAC6F,GACd,IAAMhJ,EAAcC,cACdgJ,EAA2B9B,cAWjC,MAAO,CAAEnD,MATSwD,uBAChB,SAAC5D,EAAsBC,EAAmBC,GACxCmF,EACEjJ,EAAYkJ,MAAMtF,EAAcC,EAAWC,GADrB,cAEfA,EAFe,eAEFkF,EAAK5F,iBAFH,QAK1B,CAAC4F,EAAMhJ,EAAaiJ,O,8FCSTtH,IApBM,WACnB,MAAwBlD,qBAAxB,mBAAO+J,EAAP,KAAaC,EAAb,KACQ3I,EAAgBC,cAAhBD,YACFE,EAAcC,cAcpB,OAZArB,qBAAU,WAAM,4CACd,sBAAAK,EAAA,2EAEIwJ,EAFJ,SAEkBzI,EAAYmJ,cAF9B,kFAKIhJ,QAAQC,MAAR,MALJ,0DADc,uBAAC,WAAD,wBASdgJ,KACC,CAACX,EAASzI,EAAaF,IAEnB0I,I,8FCEMa,IAnBO,WACpB,MAAwB5K,qBAAxB,mBAAO+J,EAAP,KAAaC,EAAb,KACQ3I,EAAgBC,cAAhBD,YACFE,EAAcC,cAapB,OAXArB,qBAAU,WAAM,4CACd,sBAAAK,EAAA,2EAEIwJ,EAFJ,SAEkBzI,EAAYsJ,eAF9B,kFAIInJ,QAAQC,MAAR,MAJJ,0DADc,uBAAC,WAAD,wBAQdmJ,KACC,CAACd,EAASzI,EAAaF,IAEnB0I,I,qCCVGgB,E,mPAHNC,EAAiBC,IAAOC,UAAUC,WAClCC,EAAsBC,IAAUC,KAAK,8B,SAE/BP,O,qBAAAA,I,+BAAAA,I,qBAAAA,I,wBAAAA,M,KAoDGQ,I,IAAAA,EA5Cf,SAA0BpG,GACxB,IACIqG,EADEjK,EAAcC,cAEhB2D,IAAiBsG,IAAYD,EAAQjK,EAAYmK,IAC5CvG,IAAiBwG,IAAaH,EAAQjK,EAAYqK,KAClDzG,IAAiB0G,MAAeL,EAAQjK,EAAYuK,QAC7D,IAAMC,EAAkBC,YAAsBR,EAAMnI,QAAS4I,KACvDC,EAAmBC,YAAaX,EAAOS,IAAoBF,GAG3DK,EAA+B7I,mBAAQ,WAE3C,OAAIiI,IAAUjK,EAAYmK,IAAYX,EAAcsB,SAC/CH,EAGEA,EAAiBI,GAAGlB,GACvBW,EACEhB,EAAcwB,QACdxB,EAAcyB,aAChBzB,EAAcsB,SAPYtB,EAAc0B,UAQ3C,CAACP,EAAkBH,EAAiBP,EAAOjK,IAExCoH,EAAiBC,cAEjB8D,EAAU3D,sBAAW,sBAAC,4BAAAvI,EAAA,yDACtB4L,IAAkBrB,EAAcyB,aADV,uBAExB9K,QAAQC,MAAM,oCAFU,0CAMH6J,EAAMkB,QAAQT,IAAoBjB,GAN/B,OAMpB2B,EANoB,OAO1BhE,EAAegE,EAAU,CACvB1D,QAAQ,WAAD,OAAauC,EAAMtD,QAC1B0E,SAAU,CACRC,aAAcrB,EAAMnI,QACpByJ,QAASb,OAXa,2CAczB,CAACG,EAAeZ,EAAO7C,IAE1B,MAAO,CAACyD,EAAeM,I,UC6EnBK,EAAqBjI,IAAO8E,IAAV,+DACZ,SAACC,GAAD,OAAWA,EAAM3H,MAAM6D,QAAQ,MAChC,SAAC8D,GAAD,OAAWA,EAAM3H,MAAM6D,QAAQ,MAGpCiH,EAAwBlI,IAAO8E,IAAV,+KAEhB,SAACC,GAAD,OAAWA,EAAM3H,MAAMkE,MAAM6G,KAAK,QAOvCC,EAAiBC,YAAW,CAChCC,KAAM,CACJC,gBAAiB,QACjBjH,MAAO,UACP,UAAW,CACTiH,gBAAiB,OACjBjH,MAAO,WAETkH,SAAU,CACRD,gBAAiB,WATAF,CAYpBI,KAEYvI,IA3IsB,SAAC,GAA6D,IAA3DE,EAA0D,EAA1DA,UAA0D,KAA/CsI,UAA+C,EAApCpI,kBAAoC,MAAxB,GAAwB,MAApBH,gBAAoB,MAAT,GAAS,EAC1F1D,EAAcC,cACZvB,EAAYwN,cAAZxN,QACFyN,GAAc9M,OAAOX,GAAW,MAAM0D,QAAQ,GAAGgK,WACjDC,EAAcC,YAAgBtM,EAAYqK,MAC1CkC,EAAgBD,YAAgBtM,EAAYuK,QAClD,EAAsB9L,mBAAS,IAA/B,mBAAO+N,EAAP,KAAYC,EAAZ,KACA,EAAwChO,mBAASyL,KAAjD,mBAAOtG,EAAP,KAAqB8I,EAArB,KACA,EAAsDjO,mBAAS0N,GAA/D,mBAAOQ,EAAP,KAA4BC,EAA5B,KACA,EAAgCnO,mBAAS,CAAEoO,OAAQ,IAAKC,OAAQ,MAAhE,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA6ChD,EAAiBpG,GAA9D,mBAAOqJ,GAAP,KAA4BC,GAA5B,KACM/L,GAAiBC,YAAW,eAC5BC,GAAmBD,YAAW,kBAC9BW,GAAcC,mBAAQ,kBAAOb,IAAkC,OAAO,CAACA,KACvEc,GAAgBD,mBAAQ,kBAAOX,IAAsC,OAAO,CAACA,KAC7E8L,GAAiBtJ,EAAUuJ,WAAWhD,KAArB,OAAoCrI,SAApC,IAAoCA,QAApC,EAAoCA,GAAaiF,UAAjD,OAA6D/E,SAA7D,IAA6DA,QAA7D,EAA6DA,GAAe+E,UAWnG,IAYMqG,GAAY,uCAAG,WAAOC,GAAP,eAAArO,EAAA,yDACW,KAA1BqO,EAAEC,cAAcC,OAA0C,IAA1BF,EAAEC,cAAcC,QAClDf,EAAOa,EAAEC,cAAcC,OACvBR,EAAY,CAAEH,OAAQ,IAAKC,OAAQ,OAnBpBW,EAqBFH,EAAEC,cAAcC,OApBvBzJ,MAAM2J,WAAWD,KAAOE,SAASF,GAetB,wDAMnBhB,EAAOa,EAAEC,cAAcC,OANJ,SAOOxN,EAAY4N,cAAchK,EAAcC,EAAWrB,OAAO8K,EAAEC,cAAcC,QAPjF,OAObK,EAPa,OAQnBb,EAAY,CAAEH,OAAQgB,EAAY,GAAGzB,WAAYU,OAAQe,EAAY,GAAGzB,aARrD,iCAhBrB,IAAmBqB,IAgBE,OAAH,sDAWZK,GAAe,uCAAG,4BAAA7O,EAAA,6DACtBwN,EAAOE,GADe,SAEI3M,EAAY4N,cAAchK,EAAcC,EAAWrB,OAAOmK,IAF9D,OAEhBkB,EAFgB,OAGtBb,EAAY,CAAEH,OAAQgB,EAAY,GAAGzB,WAAYU,OAAQe,EAAY,GAAGzB,aAHlD,2CAAH,qDAMrB,OACE,kBAAC2B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAI,mBAAcpK,KAC9B,kBAAC2H,EAAD,MACA,kBAAC0C,EAAA,EAAD,CAAYpJ,MAAO,CAAED,MAAO,WAAasJ,GAAG,SAA5C,4BAGA,kBAACC,EAAA,EAAD,CACEC,SArCoB,SAACC,GACzB,IAAMd,EAAQc,EAAMhI,OAAOkH,MAC3Bd,EAAgBc,GAChBZ,EAAuBT,GACnBmC,EAAMhI,OAAOkH,QAAUlD,KACzBsC,EAAuB2B,YAAkBhC,EAAe7I,IAEtD4K,EAAMhI,OAAOkH,QAAUpD,KACzBwC,EAAuB2B,YAAkBlC,EAAa3I,KA8BpDoB,MAAO,CAAED,MAAO,WAChB2J,QAAQ,QACRL,GAAG,SACHX,MAAO5J,GAEP,kBAAC+H,EAAD,CAAgB6B,MAAOtD,KAAvB,OACA,kBAACyB,EAAD,CAAgB6B,MAAOlD,KAAvB,WAEA,kBAACqB,EAAD,CAAgB6B,MAAOpD,KAAvB,SAEF,kBAACqE,EAAA,EAAD,CACEC,YAAaZ,GACbO,SAAUhB,GACVG,MAAOhB,EACPmC,IAAKhC,EACLhG,OAAQ/C,IAEV,kBAACgL,EAAA,EAAD,CAAOX,KAAK,oBACZ,kBAACxC,EAAD,KACG,IACA5H,EAFH,KAEgBxE,OAAO0N,EAASF,QAAUxN,OAAO8N,KAEjD,kBAAC1B,EAAD,KACG,IADH,IAEIpM,OAAO0N,EAASF,QAFpB,IAE8B3C,IAF9B,MAE6C7K,OAAO0N,EAASD,QAAS,IACnEjJ,EAAUuJ,WAAWhD,KAAeA,IAAcE,IAHrD,IAGqE,KAErE,kBAACuE,EAAA,EAAD,KACE,kBAACzI,EAAA,EAAD,CACEvB,MAAM,UACNc,QAAQ,YACRmB,QAAS,kBACPmG,KAAwBzD,EAAcsB,SAAWoC,KAAkBvJ,EAAUC,EAAcC,EAAW2I,KAGvGS,KAAwBzD,EAAcsB,SAAW,UAAY,aAIlE,kBAACU,EAAD,MACA,kBAAC9F,EAAA,EAAD,CAAOC,QAAQ,SAASC,SAAS,WAAjC","file":"static/js/14.5418ca30.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\"\nimport Web3 from \"web3\"\nimport { web3ProviderFrom } from \"../tomb-finance/ether-utils\"\nimport { getBalance } from \"../utils/formatBalance\"\nconst web3 = new Web3(\"https://rpcapi.fantom.network/\")\n\nconst ERC20ABI = [{ \"constant\": true, \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"name\": \"\", \"type\": \"string\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"_spender\", \"type\": \"address\" }, { \"name\": \"_value\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"_from\", \"type\": \"address\" }, { \"name\": \"_to\", \"type\": \"address\" }, { \"name\": \"_value\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"decimals\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint8\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"name\": \"_owner\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"name\": \"balance\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"name\": \"\", \"type\": \"string\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"_to\", \"type\": \"address\" }, { \"name\": \"_value\", \"type\": \"uint256\" } ], \"name\": \"transfer\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"name\": \"_owner\", \"type\": \"address\" }, { \"name\": \"_spender\", \"type\": \"address\" } ], \"name\": \"allowance\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"payable\": true, \"stateMutability\": \"payable\", \"type\": \"fallback\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"name\": \"spender\", \"type\": \"address\" }, { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" } ]\nconst treasuryAddress = \"0x8f555E00ea0FAc871b3Aa70C015915dB094E7f88\"\n\n// const assetList = [\n//     \"0xc54A1684fD1bef1f077a336E6be4Bd9a3096a6Ca\", // 2shares\n//     \"0x6398ACBBAB2561553a9e458Ab67dCFbD58944e52\", // 2shares/FTM LP\n//     \"0x83A52eff2E9D112E9B022399A9fD22a9DB7d33Ae\", // 3omb/wftm\n//     \"0x6437ADAC543583C4b31Bf0323A0870430F5CC2e7\", // 3shares\n//     \"0xd352daC95a91AfeFb112DBBB3463ccfA5EC15b65\", // 3shares/wftm\n// ]\n\n// const contracts = assetList.map(asset => new web3.eth.Contract(ERC20ABI, asset))\n\n// function useTotalTreasuryBalance() {\n//     const [ prices, setPrices ] = useState(assetList.map(asset => {\n//         return { token: asset, value: 0 }\n//     }))\n//     useEffect(() => {\n//         getPrices()\n//     }, [])\n\n//     async function getPrices() {\n//         for (const token of contracts) {\n//             console.log(token)\n//         }\n//     }\n\n//     return prices\n// }\n\nfunction useBurned2SHARES() {\n    const [balance, setBalance] = useState(0)\n\n    useEffect(() => {\n        getBalance()\n        const interval = setInterval(() => {\n            getBalance()\n        }, 30000)\n        return () => {\n            clearInterval(interval);\n        }\n    }, [])\n\n    return { balance }\n\n    async function getBalance() {\n        const token3shares = new web3.eth.Contract(ERC20ABI, '0x6437ADAC543583C4b31Bf0323A0870430F5CC2e7')\n        const balance = Number(web3.utils.fromWei(await token3shares.methods.balanceOf(treasuryAddress).call()))\n        \n        setBalance(balance)\n    }\n}\n\nexport default useBurned2SHARES","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport useRefresh from './useRefresh';\n\nconst useTotalValueLocked = () => {\n  const [totalValueLocked, setTotalValueLocked] = useState<Number>(0);\n  const { slowRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchTVL() {\n      try {\n        setTotalValueLocked(await tombFinance.getTotalValueLocked());\n      }\n      catch(err){\n        console.error(err);\n      }\n    }\n    fetchTVL();\n  }, [setTotalValueLocked, tombFinance, slowRefresh]);\n\n  return totalValueLocked;\n};\n\nexport default useTotalValueLocked;\n","import React, { useMemo } from 'react';\nimport Page from '../../components/Page';\nimport HomeImage from '../../assets/img/wallpaperbetter.jpg';\nimport CashImage from '../../assets/img/moon2.png';\nimport Image from 'material-ui-image';\nimport styled from 'styled-components';\nimport { Alert } from '@material-ui/lab';\nimport { createGlobalStyle } from 'styled-components';\nimport CountUp from 'react-countup';\nimport CardIcon from '../../components/CardIcon';\nimport TokenSymbol from '../../components/TokenSymbol';\nimport useTombStats from '../../hooks/useTombStats';\nimport useLpStats from '../../hooks/useLpStats';\nimport useModal from '../../hooks/useModal';\nimport useZap from '../../hooks/useZap';\nimport useBondStats from '../../hooks/useBondStats';\nimport usetShareStats from '../../hooks/usetShareStats';\nimport useBurned2SHARES from '../../hooks/useBurned2SHARES.js';\nimport useTotalValueLocked from '../../hooks/useTotalValueLocked';\nimport { tomb as tombTesting, tShare as tShareTesting } from '../../tomb-finance/deployments/deployments.testing.json';\nimport { tomb as tombProd, tShare as tShareProd } from '../../tomb-finance/deployments/deployments.mainnet.json';\n\nimport MetamaskFox from '../../assets/img/metamask-fox.svg';\n\nimport { Box, Button, Card, CardContent, Grid, Paper } from '@material-ui/core';\nimport ZapModal from '../Bank/components/ZapModal';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport useTombFinance from '../../hooks/useTombFinance';\n\nconst BackgroundImage = createGlobalStyle`\n  body {\n    background: url(${HomeImage}) no-repeat !important;\n    background-size: cover !important;\n  }\n`;\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    [theme.breakpoints.down('415')]: {\n      marginTop: '10px',\n    },\n  },\n}));\n\nconst Home = () => {\n  const classes = useStyles();\n  const TVL = useTotalValueLocked();\n  const tombFtmLpStats = useLpStats('XOMB-FTM-LP');\n  const tShareFtmLpStats = useLpStats('XSHARES-FTM-LP');\n  const tombStats = useTombStats();\n  const tShareStats = usetShareStats();\n  const tBondStats = useBondStats();\n  const tombFinance = useTombFinance();\n  const { balance } = useBurned2SHARES();\n\n  let tomb;\n  let tShare;\n  if (!process.env.NODE_ENV || process.env.NODE_ENV === 'production') {\n    tomb = tombTesting;\n    tShare = tShareTesting;\n  } else {\n    tomb = tombProd;\n    tShare = tShareProd;\n  }\n\n  const buyTombAddress = 'https://spookyswap.finance/swap?outputCurrency=0x7a6e4e3cc2ac9924605dca4ba31d1831c84b44ae'\n  const buyTShareAddress = 'https://spookyswap.finance/swap?outputCurrency=' + tShare.address;\n\n  const tombLPStats = useMemo(() => (tombFtmLpStats ? tombFtmLpStats : null), [tombFtmLpStats]);\n  const tshareLPStats = useMemo(() => (tShareFtmLpStats ? tShareFtmLpStats : null), [tShareFtmLpStats]);\n  const tombPriceInDollars = useMemo(\n    () => (tombStats ? Number(tombStats.priceInDollars).toFixed(2) : null),\n    [tombStats],\n  );\n  const tombPriceInFTM = useMemo(() => (tombStats ? Number(tombStats.tokenInFtm).toFixed(4) : null), [tombStats]);\n  const tombCirculatingSupply = useMemo(() => (tombStats ? String(tombStats.circulatingSupply) : null), [tombStats]);\n  const tombTotalSupply = useMemo(() => (tombStats ? String(tombStats.totalSupply) : null), [tombStats]);\n\n  const tSharePriceInDollars = useMemo(\n    () => (tShareStats ? Number(tShareStats.priceInDollars).toFixed(2) : null),\n    [tShareStats],\n  );\n  const tSharePriceInFTM = useMemo(\n    () => (tShareStats ? Number(tShareStats.tokenInFtm).toFixed(4) : null),\n    [tShareStats],\n  );\n  const tShareCirculatingSupply = useMemo(\n    () => (tShareStats ? String(tShareStats.circulatingSupply) : null),\n    [tShareStats],\n  );\n  const tShareTotalSupply = useMemo(() => (tShareStats ? String(tShareStats.totalSupply) : null), [tShareStats]);\n\n  const tBondPriceInDollars = useMemo(\n    () => (tBondStats ? Number(tBondStats.priceInDollars).toFixed(2) : null),\n    [tBondStats],\n  );\n  const tBondPriceInFTM = useMemo(() => (tBondStats ? Number(tBondStats.tokenInFtm).toFixed(4) : null), [tBondStats]);\n  const tBondCirculatingSupply = useMemo(\n    () => (tBondStats ? String(tBondStats.circulatingSupply) : null),\n    [tBondStats],\n  );\n  const tBondTotalSupply = useMemo(() => (tBondStats ? String(tBondStats.totalSupply) : null), [tBondStats]);\n\n  const tombLpZap = useZap({ depositTokenName: 'XOMB-FTM-LP' });\n  const tshareLpZap = useZap({ depositTokenName: 'XSHARES-FTM-LP' });\n\n  const StyledLink = styled.a`\n    font-weight: 700;\n    text-decoration: none;\n  \n  `;\n\n  const [onPresentTombZap, onDissmissTombZap] = useModal(\n    <ZapModal\n      decimals={18}\n      onConfirm={(zappingToken, tokenName, amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        tombLpZap.onZap(zappingToken, tokenName, amount);\n        onDissmissTombZap();\n      }}\n      tokenName={'XOMB-FTM-LP'}\n    />,\n  );\n\n  const [onPresentTshareZap, onDissmissTshareZap] = useModal(\n    <ZapModal\n      decimals={18}\n      onConfirm={(zappingToken, tokenName, amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        tshareLpZap.onZap(zappingToken, tokenName, amount);\n        onDissmissTshareZap();\n      }}\n      tokenName={'XSHARES-FTM-LP'}\n    />,\n  );\n\n  return (\n    <Page>\n      <BackgroundImage />\n      <Grid container spacing={3}>\n        {/* Logo */}\n        <Grid container item xs={12} sm={4} justify=\"center\">\n          {/* <Paper>xs=6 sm=3</Paper> */}\n          <Image color=\"none\" style={{ width: \"164px\", height: \"164px\", objectFit: \"contain\", paddingTop: '100px' }} src={CashImage} />\n        </Grid>\n        {/* Explanation text */}\n        <Grid item xs={12} sm={8}>\n          <Paper>\n            <Box p={4}>\n              <h2>Welcome to Moon Finance!</h2>\n              <p>Pegged to the price of 1 FTM via seigniorage.</p>\n              <p>\n              <StyledLink href=\"/farms\">Stake</StyledLink> your 2OMB-FTM LP tokens to earn 2SHARE seigniorage rewards.\n              </p>\n              <p>To maximize profits, stake your harvested 2SHAREs in the <StyledLink href=\"/boardroom\">Boardroom</StyledLink> to earn more 2OMB!</p>\n            </Box>\n          </Paper>\n\n\n\n        </Grid>\n\n        <Grid container justify=\"center\">\n            <Box mt={3} style={{ width: '1000px' }}>\n            <Alert variant=\"filled\" severity=\"warning\">\n                Do your own research before investing. Investing is risky and may result in monetary loss. 2omb is beta software and may contain bugs. By using 2omb, you agree that the 2omb and 3omb team is not responsible for any financial losses from investing in 2omb or 3omb.\n            </Alert>\n            </Box>\n        </Grid>\n\n        {/* TVL */}\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent align=\"center\">\n              <h2>Total Value Locked</h2>\n              <CountUp style={{ fontSize: '25px' }} end={TVL} separator=\",\" prefix=\"$\" />\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Wallet */}\n        <Grid item xs={12} sm={8}>\n          <Card style={{ height: '100%' }}>\n            <CardContent align=\"center\" style={{ marginTop: '2.5%' }}>\n              {/* <h2 style={{ marginBottom: '20px' }}>Wallet Balance</h2> */}\n              {/* <Button color=\"primary\" href=\"/masonry\" variant=\"contained\" style={{ marginRight: '25px' }}>\n                Stake Now\n              </Button> */}\n              {/* <Button href=\"/cemetery\" variant=\"contained\" style={{ marginRight: '25px' }}>\n                Stake Now\n              </Button> */}\n              <Button color=\"primary\" href=\"/farms\" variant=\"contained\" style={{ marginRight: '25px' }}>\n                Farms\n              </Button>\n              <Button\n                color=\"primary\"\n                target=\"_blank\"\n                href={buyTombAddress}\n                variant=\"contained\"\n                style={{ marginRight: '25px' }}\n                className={classes.button}\n              >\n                Buy MOON\n              </Button>\n              {/* <Button variant=\"contained\" target=\"_blank\" href={buyTShareAddress} className={classes.button}>\n                Buy 2SHARE\n              </Button> */}\n              <Button color=\"primary\" target=\"_blank\" href=\"https://spookyswap.finance/swap?outputCurrency=0xc54a1684fd1bef1f077a336e6be4bd9a3096a6ca\" variant=\"contained\" style={{ marginRight: '25px' }}>\n                Buy MSHARES\n              </Button>\n              <Button color=\"primary\" target=\"_blank\" href=\"https://dexscreener.com/fantom/0xbdc7dfb7b88183e87f003ca6b5a2f81202343478\" variant=\"contained\" style={{ marginRight: '25px' }}>\n                MOON Chart\n              </Button>\n              <Button color=\"primary\" target=\"_blank\" href=\"https://dexscreener.com/fantom/0xc54A1684fD1bef1f077a336E6be4Bd9a3096a6Ca\" variant=\"contained\" style={{ marginRight: '25px' }}>\n                MSHARES Chart\n              </Button>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* TOMB */}\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\n              <h2>MOON</h2>\n              <Box mt={2}>\n                <CardIcon>\n                  <TokenSymbol symbol=\"TOMB\" />\n                </CardIcon>\n              </Box>\n              Current Price\n              <Box>\n                <span style={{ fontSize: '30px' }}>{tombPriceInFTM ? tombPriceInFTM : '-.----'} FTM</span>\n              </Box>\n              <Box>\n                <span style={{ fontSize: '16px', alignContent: 'flex-start' }}>\n                  ${tombPriceInDollars ? tombPriceInDollars : '-.--'}\n                </span>\n              </Box>\n              <span style={{ fontSize: '12px' }}>\n                Market Cap: ${(tombCirculatingSupply * tombPriceInDollars).toFixed(2)} <br />\n                Circulating Supply: {tombCirculatingSupply} <br />\n                Total Supply: {tombTotalSupply-140000}\n              </span>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* <Grid item xs={12} sm={3}>\n          <Card>\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\n              <h2>2OMBp</h2>\n              <Box mt={2}>\n                <CardIcon>\n                  <TokenSymbol symbol=\"TOMB\" />\n                </CardIcon>\n              </Box>\n              Current Price\n              <Box>\n                <span style={{ fontSize: '30px' }}>{tombPriceInFTM ? tombPriceInFTM : '-.----'} FTM</span>\n              </Box>\n              <Box>\n                <span style={{ fontSize: '16px', alignContent: 'flex-start' }}>\n                  ${tombPriceInDollars ? tombPriceInDollars : '-.--'}\n                </span>\n              </Box>\n              <span style={{ fontSize: '12px' }}>\n                Market Cap: ${(tombCirculatingSupply * tombPriceInDollars).toFixed(2)} <br />\n                Circulating Supply: {tombCirculatingSupply} <br />\n                Total Supply: {tombTotalSupply-140000}\n              </span>\n            </CardContent>\n          </Card>\n        </Grid> */}\n\n        {/* TSHARE */}\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\n              <h2>MSHARES</h2>\n              <Box mt={2}>\n                <CardIcon>\n                  <TokenSymbol symbol=\"TSHARE\" />\n                </CardIcon>\n              </Box>\n              Current Price\n              <Box>\n                <span style={{ fontSize: '30px' }}>{tSharePriceInFTM ? tSharePriceInFTM : '-.----'} FTM</span>\n              </Box>\n              <Box>\n                <span style={{ fontSize: '16px' }}>${tSharePriceInDollars ? tSharePriceInDollars : '-.--'}</span>\n              </Box>\n              <span style={{ fontSize: '12px' }}>\n                Market Cap: ${(tShareCirculatingSupply * tSharePriceInDollars).toFixed(2)} <br />\n                Circulating Supply: {tShareCirculatingSupply-balance} <br />\n                Total Supply: {tShareTotalSupply-balance}\n              </span>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* TBOND */}\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\n              <h2>MBOND</h2>\n              <Box mt={2}>\n                <CardIcon>\n                  <TokenSymbol symbol=\"TBOND\" />\n                </CardIcon>\n              </Box>\n              Current Price\n              <Box>\n                <span style={{ fontSize: '30px' }}>{tBondPriceInFTM ? tBondPriceInFTM : '-.----'} FTM</span>\n              </Box>\n              <Box>\n                <span style={{ fontSize: '16px' }}>${tBondPriceInDollars ? tBondPriceInDollars : '-.--'}</span>\n              </Box>\n              <span style={{ fontSize: '12px' }}>\n                Market Cap: $-.-- <br />\n                Circulating Supply: ------ <br />\n                Total Supply: ------\n              </span>\n              {/* <span style={{ fontSize: '12px' }}>\n                Market Cap: ${(tBondCirculatingSupply * tBondPriceInDollars).toFixed(2)} <br />\n                Circulating Supply: {tBondCirculatingSupply} <br />\n                Total Supply: {tBondTotalSupply}\n              </span> */}\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Card>\n            <CardContent align=\"center\">\n              <h2>MOON-WFTM Spooky LP</h2>\n              <Box mt={2}>\n                <CardIcon>\n                  <TokenSymbol symbol=\"2OMB-FTM-LP\" />\n                </CardIcon>\n              </Box>\n              <Box mt={2}>\n                <Button color=\"primary\" disabled={false} onClick={onPresentTombZap} variant=\"contained\">\n                  Zap In!\n                </Button>\n              </Box>\n              <Box mt={2}>\n                <span style={{ fontSize: '26px' }}>\n                  {tombLPStats?.tokenAmount ? tombLPStats?.tokenAmount : '-.--'} 2OMB /{' '}\n                  {tombLPStats?.ftmAmount ? tombLPStats?.ftmAmount : '-.--'} FTM\n                </span>\n              </Box>\n              <Box>${tombLPStats?.priceOfOne ? tombLPStats.priceOfOne : '-.--'}</Box>\n              <span style={{ fontSize: '12px' }}>\n                Liquidity: ${tombLPStats?.totalLiquidity ? tombLPStats.totalLiquidity : '-.--'} <br />\n                Total supply: {tombLPStats?.totalSupply ? tombLPStats.totalSupply : '-.--'}\n              </span>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Card>\n            <CardContent align=\"center\">\n              <h2>MSHARES-WFTM Spooky LP</h2>\n              <Box mt={2}>\n                <CardIcon>\n                  <TokenSymbol symbol=\"2SHARE-FTM-LP\" />\n                </CardIcon>\n              </Box>\n              <Box mt={2}>\n                <Button color=\"primary\" onClick={onPresentTshareZap} variant=\"contained\">\n                  Zap In!\n                </Button>\n              </Box>\n              <Box mt={2}>\n                <span style={{ fontSize: '26px' }}>\n                  {tshareLPStats?.tokenAmount ? tshareLPStats?.tokenAmount : '-.--'} 2SHARES /{' '}\n                  {tshareLPStats?.ftmAmount ? tshareLPStats?.ftmAmount : '-.--'} FTM\n                </span>\n              </Box>\n              <Box>${tshareLPStats?.priceOfOne ? tshareLPStats.priceOfOne : '-.--'}</Box>\n              <span style={{ fontSize: '12px' }}>\n                Liquidity: ${tshareLPStats?.totalLiquidity ? tshareLPStats.totalLiquidity : '-.--'}\n                <br />\n                Total supply: {tshareLPStats?.totalSupply ? tshareLPStats.totalSupply : '-.--'}\n              </span>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Page>\n  );\n};\n\nexport default Home;\n","import { useCallback } from 'react';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { useAddPopup } from '../state/application/hooks';\n\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\n  const addTransaction = useTransactionAdder();\n  const addPopup = useAddPopup();\n\n  return useCallback(\n    (promise: Promise<TransactionResponse>, summary: string) => {\n      promise\n        .then((tx) => addTransaction(tx, { summary }))\n        .catch((err) => {\n          if (err.message.includes('User denied')) {\n            // User denied transaction signature on MetaMask.\n            return;\n          }\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\n          console.error(`${message}: ${err.message || err.stack}`);\n          addPopup({ error: { message, stack: err.message || err.stack } });\n        });\n    },\n    [addPopup, addTransaction],\n  );\n}\n\nexport default useHandleTransactionReceipt;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface CardIconProps {\n  children?: React.ReactNode;\n}\n\nconst CardIcon: React.FC<CardIconProps> = ({ children }) => <StyledCardIcon>{children}</StyledCardIcon>;\n\nconst StyledCardIcon = styled.div`\nbackground-color: none;\nfont-size: 36px;\nheight: 95px;\nwidth: 95px;\nborder-radius: 40px;\nalign-items: center;\ndisplay: flex;\njustify-content: center;\nbox-shadow: none !important;\nmargin: 0 auto ${(props) => props.theme.spacing[3]}px;\n`;\n\nexport default CardIcon;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { TokenStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useTombStats = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const { fastRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchTombPrice(){\n      try {\n        setStat(await tombFinance.getTombStat());\n      }\n      catch(err){\n        console.error(err)\n      }\n    }\n    fetchTombPrice();\n  }, [setStat, tombFinance, fastRefresh]);\n\n  return stat;\n};\n\nexport default useTombStats;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { LPStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useLpStats = (lpTicker: string) => {\n  const [stat, setStat] = useState<LPStat>();\n  const { slowRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchLpPrice() {\n      try{\n        setStat(await tombFinance.getLPStat(lpTicker));\n      }\n      catch(err){\n        console.error(err);\n      }\n    }\n    fetchLpPrice();\n  }, [setStat, tombFinance, slowRefresh, lpTicker]);\n\n  return stat;\n};\n\nexport default useLpStats;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst useZap = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleZap = useCallback(\n    (zappingToken: string, tokenName: string, amount: string) => {\n      handleTransactionReceipt(\n        tombFinance.zapIn(zappingToken, tokenName, amount),\n        `Zap ${amount} in ${bank.depositTokenName}.`,\n      );\n    },\n    [bank, tombFinance, handleTransactionReceipt],\n  );\n  return { onZap: handleZap };\n};\n\nexport default useZap;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { TokenStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useBondStats = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const { slowRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchBondPrice() {\n      try {\n        setStat(await tombFinance.getBondStat());\n      }\n      catch(err){\n        console.error(err);\n      }\n    }\n    fetchBondPrice();\n  }, [setStat, tombFinance, slowRefresh]);\n\n  return stat;\n};\n\nexport default useBondStats;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { TokenStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useShareStats = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const { slowRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchSharePrice() {\n      try {\n        setStat(await tombFinance.getShareStat());\n      } catch(err){\n        console.error(err)\n      }\n    }\n    fetchSharePrice();\n  }, [setStat, tombFinance, slowRefresh]);\n\n  return stat;\n};\n\nexport default useShareStats;\n","import { BigNumber, ethers } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport ERC20 from '../tomb-finance/ERC20';\nimport { FTM_TICKER, TOMB_TICKER, TSHARE_TICKER, ZAPPER_ROUTER_ADDR } from '../utils/constants';\nimport useTombFinance from './useTombFinance';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApproveZapper(zappingToken: string): [ApprovalState, () => Promise<void>] {\n  const tombFinance = useTombFinance();\n  let token: ERC20;\n  if (zappingToken === FTM_TICKER) token = tombFinance.FTM;\n  else if (zappingToken === TOMB_TICKER) token = tombFinance.TOMB;\n  else if (zappingToken === TSHARE_TICKER) token = tombFinance.TSHARE;\n  const pendingApproval = useHasPendingApproval(token.address, ZAPPER_ROUTER_ADDR);\n  const currentAllowance = useAllowance(token, ZAPPER_ROUTER_ADDR, pendingApproval);\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (token === tombFinance.FTM) return ApprovalState.APPROVED;\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval, token, tombFinance]);\n\n  const addTransaction = useTransactionAdder();\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(ZAPPER_ROUTER_ADDR, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: ZAPPER_ROUTER_ADDR,\n      },\n    });\n  }, [approvalState, token, addTransaction]);\n\n  return [approvalState, approve];\n}\n\nexport default useApproveZapper;\n","import React, { useState, useMemo } from 'react';\n\nimport { Button, Select, MenuItem, InputLabel, Typography, withStyles } from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, { ModalProps } from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\nimport styled from 'styled-components';\n\nimport { getDisplayBalance } from '../../../utils/formatBalance';\nimport Label from '../../../components/Label';\nimport useLpStats from '../../../hooks/useLpStats';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useTombFinance from '../../../hooks/useTombFinance';\nimport { useWallet } from 'use-wallet';\nimport useApproveZapper, { ApprovalState } from '../../../hooks/useApproveZapper';\nimport { TOMB_TICKER, TSHARE_TICKER, FTM_TICKER } from '../../../utils/constants';\nimport { Alert } from '@material-ui/lab';\n\ninterface ZapProps extends ModalProps {\n  onConfirm: (zapAsset: string, lpName: string, amount: string) => void;\n  tokenName?: string;\n  decimals?: number;\n}\n\nconst ZapModal: React.FC<ZapProps> = ({ onConfirm, onDismiss, tokenName = '', decimals = 18 }) => {\n  const tombFinance = useTombFinance();\n  const { balance } = useWallet();\n  const ftmBalance = (Number(balance) / 1e18).toFixed(4).toString();\n  const tombBalance = useTokenBalance(tombFinance.TOMB);\n  const tshareBalance = useTokenBalance(tombFinance.TSHARE);\n  const [val, setVal] = useState('');\n  const [zappingToken, setZappingToken] = useState(FTM_TICKER);\n  const [zappingTokenBalance, setZappingTokenBalance] = useState(ftmBalance);\n  const [estimate, setEstimate] = useState({ token0: '0', token1: '0' }); // token0 will always be FTM in this case\n  const [approveZapperStatus, approveZapper] = useApproveZapper(zappingToken);\n  const tombFtmLpStats = useLpStats('XOMB-FTM-LP');\n  const tShareFtmLpStats = useLpStats('XSHARES-FTM-LP');\n  const tombLPStats = useMemo(() => (tombFtmLpStats ? tombFtmLpStats : null), [tombFtmLpStats]);\n  const tshareLPStats = useMemo(() => (tShareFtmLpStats ? tShareFtmLpStats : null), [tShareFtmLpStats]);\n  const ftmAmountPerLP = tokenName.startsWith(TOMB_TICKER) ? tombLPStats?.ftmAmount : tshareLPStats?.ftmAmount;\n\n  /**\n   * Checks if a value is a valid number or not\n   * @param n is the value to be evaluated for a number\n   * @returns\n   */\n  function isNumeric(n: any) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  const handleChangeAsset = (event: any) => {\n    const value = event.target.value;\n    setZappingToken(value);\n    setZappingTokenBalance(ftmBalance);\n    if (event.target.value === TSHARE_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(tshareBalance, decimals));\n    }\n    if (event.target.value === TOMB_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(tombBalance, decimals));\n    }\n  };\n\n  const handleChange = async (e: any) => {\n    if (e.currentTarget.value === '' || e.currentTarget.value === 0) {\n      setVal(e.currentTarget.value);\n      setEstimate({ token0: '0', token1: '0' });\n    }\n    if (!isNumeric(e.currentTarget.value)) return;\n    setVal(e.currentTarget.value);\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(e.currentTarget.value));\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\n  };\n\n  const handleSelectMax = async () => {\n    setVal(zappingTokenBalance);\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(zappingTokenBalance));\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\n  };\n\n  return (\n    <Modal>\n      <ModalTitle text={`Zap into ${tokenName}`} />\n      <StyledActionSpacer />\n      <InputLabel style={{ color: '#2c2560' }} id=\"label\">\n        Select asset to zap with\n      </InputLabel>\n      <Select\n        onChange={handleChangeAsset}\n        style={{ color: '#2c2560' }}\n        labelId=\"label\"\n        id=\"select\"\n        value={zappingToken}\n      >\n        <StyledMenuItem value={FTM_TICKER}>FTM</StyledMenuItem>\n        <StyledMenuItem value={TSHARE_TICKER}>2SHARES</StyledMenuItem>\n        {/* Tomb as an input for zapping will be disabled due to issues occuring with the Gatekeeper system */}\n        <StyledMenuItem value={TOMB_TICKER}>2OMB</StyledMenuItem>\n      </Select>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={zappingTokenBalance}\n        symbol={zappingToken}\n      />\n      <Label text=\"Zap Estimations\" />\n      <StyledDescriptionText>\n        {' '}\n        {tokenName}: {Number(estimate.token0) / Number(ftmAmountPerLP)}\n      </StyledDescriptionText>\n      <StyledDescriptionText>\n        {' '}\n        ({Number(estimate.token0)} {FTM_TICKER} / {Number(estimate.token1)}{' '}\n        {tokenName.startsWith(TOMB_TICKER) ? TOMB_TICKER : TSHARE_TICKER}){' '}\n      </StyledDescriptionText>\n      <ModalActions>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() =>\n            approveZapperStatus !== ApprovalState.APPROVED ? approveZapper() : onConfirm(zappingToken, tokenName, val)\n          }\n        >\n          {approveZapperStatus !== ApprovalState.APPROVED ? 'Approve' : \"Let's go\"}\n        </Button>\n      </ModalActions>\n\n      <StyledActionSpacer />\n      <Alert variant=\"filled\" severity=\"warning\">\n        Beta feature. Use at your own risk!\n      </Alert>\n    </Modal>\n  );\n};\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledDescriptionText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.color.grey[400]};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 22px;\n  justify-content: flex-start;\n`;\nconst StyledMenuItem = withStyles({\n  root: {\n    backgroundColor: 'white',\n    color: '#2c2560',\n    '&:hover': {\n      backgroundColor: 'grey',\n      color: '#2c2560',\n    },\n    selected: {\n      backgroundColor: 'black',\n    },\n  },\n})(MenuItem);\n\nexport default ZapModal;\n"],"sourceRoot":""}